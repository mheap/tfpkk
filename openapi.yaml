openapi: 3.1.0
info:
  title: Konnect API
  version: 2.1.0
  description: The Konnect platform API
  contact:
    name: Kong
    url: https://konghq.com
    email: support@konghq.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://global.api.konghq.com/v2
  - url: https://us.api.konghq.com/v2
  - url: https://eu.api.konghq.com/v2
    description: Production
externalDocs:
  description: Documentation for Kong Gateway and its APIs
  url: https://docs.konghq.com
paths:
  /api-products:
    post:
      x-speakeasy-entity-operation: ApiProduct#create
      summary: Create API Product
      description: >
        An API Product packages together associated APIs and their operations, backed by thorough documentation,

        with the objective of making API consumption straightforward for developers.

      operationId: create-api-product
      responses:
        '201':
          $ref: '#/components/responses/APIProductResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
      tags:
        - API Products
      requestBody:
        $ref: '#/components/requestBodies/CreateAPIProductRequest'
  /api-products/{apiProductId}/product-versions:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: apiProductId
        description: The API Product ID
        in: path
        required: true
    post:
      x-speakeasy-entity-operation: ApiProductVersion#create
      summary: Create API Product Version
      description: Creates a version of an API product.
      operationId: create-api-product-version
      responses:
        '201':
          $ref: '#/components/responses/APIProductVersionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
      tags:
        - API Product Versions
      requestBody:
        $ref: '#/components/requestBodies/CreateAPIProductVersionRequest'
  /api-products/{apiProductId}/product-versions/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: apiProductId
        description: The API product identifier
        in: path
        required: true
      - schema:
          type: string
          format: uuid
          example: 9f5061ce-78f6-4452-9108-ad7c02821fd5
        name: id
        description: The API product version identifier
        in: path
        required: true
    get:
      x-speakeasy-entity-operation: ApiProductVersion#read
      summary: Fetch API Product Version
      description: Returns a version of an API product.
      operationId: get-api-product-version
      responses:
        '200':
          $ref: '#/components/responses/APIProductVersionResponse'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
      tags:
        - API Product Versions
    patch:
      x-speakeasy-entity-operation: ApiProductVersion#update
      summary: Update an API Product Version
      description: Updates an API product version.
      operationId: update-api-product-version
      responses:
        '200':
          $ref: '#/components/responses/APIProductVersionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
      tags:
        - API Product Versions
      requestBody:
        $ref: '#/components/requestBodies/UpdateAPIProductVersionRequest'
    delete:
      x-speakeasy-entity-operation: ApiProductVersion#delete
      summary: Delete API Product Version
      description: Removes an API product version.
      operationId: delete-api-product-version
      responses:
        '204':
          description: API product version was deleted successfully.
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
      tags:
        - API Product Versions
  /api-products/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: id
        in: path
        required: true
        description: API product identifier
    get:
      x-speakeasy-entity-operation: ApiProduct#read
      summary: Fetch API product
      description: Returns an API product.
      operationId: get-api-product
      responses:
        '200':
          $ref: '#/components/responses/APIProductResponse'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
      tags:
        - API Products
    patch:
      x-speakeasy-entity-operation: ApiProduct#update
      summary: Update an individual API product
      description: Updates an API product.
      operationId: update-api-product
      responses:
        '200':
          $ref: '#/components/responses/APIProductResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
      tags:
        - API Products
      requestBody:
        $ref: '#/components/requestBodies/UpdateAPIProductRequest'
    delete:
      x-speakeasy-entity-operation: ApiProduct#delete
      summary: Delete API Product
      description: Removes an individual API product.
      operationId: delete-api-product
      responses:
        '204':
          description: API product was deleted successfully.
        '401':
          $ref: '#/components/responses/ApiProductUnauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ApiProductNotFound'
      tags:
        - API Products
  /control-planes:
    parameters: []
    post:
      x-speakeasy-entity-operation: GatewayControlPlane#create
      summary: Create Control Plane
      operationId: create-control-plane
      responses:
        '201':
          $ref: '#/components/responses/CreateControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '409':
          $ref: '#/components/responses/ControlPlaneConflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlPlaneRequest'
      description: Create a control plane in the Konnect Organization.
  /control-planes/{controlPlaneId}/core-entities/acls:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new ACL
      operationId: create-acl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACL'
        description: Description of the new ACL for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully created ACL
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid ACL
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new ACL
      tags:
        - ACLs
      x-speakeasy-entity-operation: ACL#create
  /control-planes/{controlPlaneId}/core-entities/acls/{ACLId}:
    delete:
      description: Delete an ACL
      operationId: delete-acl
      parameters:
        - $ref: '#/components/parameters/ACLId'
      responses:
        '204':
          description: Successfully deleted ACL or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an ACL
      tags:
        - ACLs
      x-speakeasy-entity-operation: ACL#delete
    get:
      description: Get an ACL using ID.
      operationId: get-acl
      parameters:
        - $ref: '#/components/parameters/ACLId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully fetched ACL
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch an ACL
      tags:
        - ACLs
      x-speakeasy-entity-operation: ACL#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/basic-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Basic-auth credential
      operationId: create-basic-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuth'
        description: Description of the new Basic-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully created Basic-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Basic-auth credential
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Basic-auth credential
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation: BasicAuth#create
  /control-planes/{controlPlaneId}/core-entities/basic-auths/{BasicAuthId}:
    delete:
      description: Delete a Basic-auth credential
      operationId: delete-basic-auth
      parameters:
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        '204':
          description: >-
            Successfully deleted Basic-auth credential or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Basic-auth credential
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation: BasicAuth#delete
    get:
      description: Get a Basic-auth credential using ID.
      operationId: get-basic-auth
      parameters:
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully fetched Basic-auth credential
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Basic-auth credential
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation: BasicAuth#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/ca_certificates:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new CA Certificate
      operationId: create-ca_certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCACertificate'
        description: Description of the new CA Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully created CA Certificate
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation: CACertificate#create
  /control-planes/{controlPlaneId}/core-entities/ca_certificates/{CACertificateId}:
    delete:
      description: Delete a CA Certificate
      operationId: delete-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      responses:
        '204':
          description: Successfully deleted CA Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation: CACertificate#delete
    get:
      description: Get a CA Certificate using ID.
      operationId: get-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully fetched CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation: CACertificate#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/certificates:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Certificate
      operationId: create-certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificate'
        description: Description of the new Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully created Certificate
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation: Certificate#create
  /control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}:
    delete:
      description: Delete a Certificate
      operationId: delete-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      responses:
        '204':
          description: Successfully deleted Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation: Certificate#delete
    get:
      description: Get a Certificate using ID.
      operationId: get-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully fetched Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation: Certificate#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}/snis:
    get:
      description: List all SNIs associated with a a Certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SNI'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing SNIs
      summary: List all SNIs associated with a Certificate
      tags:
        - SNIs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new SNI associated with a Certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSNIWithoutParents'
        description: Description of new SNI for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
      summary: Create a new SNI associated with a Certificate
      tags:
        - SNIs
  /control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}/snis/{SNIId}:
    delete:
      description: Delete a an SNI associated with a a Certificate using ID or name.
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
      summary: Delete a an SNI associated with a a Certificate
      tags:
        - SNIs
    get:
      description: Get an SNI associated with a Certificate using ID or name.
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '404':
          description: Resource does not exist
      summary: Fetch an SNI associated with a Certificate
      tags:
        - SNIs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update an SNI associated with a Certificate using ID or name.
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSNIWithoutParents'
        description: Description of the SNI
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
      summary: Upsert an SNI associated with a Certificate
      tags:
        - SNIs
  /control-planes/{controlPlaneId}/core-entities/consumer_groups:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Consumer Group
      operationId: create-consumer_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerGroup'
        description: Description of the new Consumer Group for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully created Consumer Group
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation: ConsumerGroup#create
  /control-planes/{controlPlaneId}/core-entities/consumer_groups/{ConsumerGroupId}:
    delete:
      description: Delete a Consumer Group
      operationId: delete-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
      responses:
        '204':
          description: Successfully deleted Consumer Group or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation: ConsumerGroup#delete
    get:
      description: Get a Consumer Group using ID.
      operationId: get-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully fetched Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation: ConsumerGroup#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Consumer
      operationId: create-consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumer'
        description: Description of the new Consumer for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully created Consumer
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation: Consumer#create
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}:
    delete:
      description: Delete a Consumer
      operationId: delete-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      responses:
        '204':
          description: Successfully deleted Consumer or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation: Consumer#delete
    get:
      description: Get a Consumer using ID or username.
      operationId: get-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully fetched Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation: Consumer#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/acls:
    get:
      description: List all ACLs associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ACL'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing ACLs
      summary: List all ACLs associated with a Consumer
      tags:
        - ACLs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new ACL associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACLWithoutParents'
        description: Description of new ACL for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully created ACL
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid ACL
      summary: Create a new ACL associated with a Consumer
      tags:
        - ACLs
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/acls/{ACLId}:
    delete:
      description: Delete a an ACL associated with a a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/ACLId'
      responses:
        '204':
          description: Successfully deleted ACL or the resource didn't exist
      summary: Delete a an ACL associated with a a Consumer
      tags:
        - ACLs
    get:
      description: Get an ACL associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/ACLId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully fetched ACL
        '404':
          description: Resource does not exist
      summary: Fetch an ACL associated with a Consumer
      tags:
        - ACLs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update an ACL associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/ACLId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACLWithoutParents'
        description: Description of the ACL
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully upserted ACL
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid ACL
      summary: Upsert an ACL associated with a Consumer
      tags:
        - ACLs
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/basic-auth:
    get:
      description: List all Basic-auth credentials associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BasicAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Basic-auth credentials
      summary: List all Basic-auth credentials associated with a Consumer
      tags:
        - Basic-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Basic-auth credential associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuthWithoutParents'
        description: Description of new Basic-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully created Basic-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Basic-auth credential
      summary: Create a new Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/basic-auth/{BasicAuthId}:
    delete:
      description: Delete a a Basic-auth credential associated with a a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        '204':
          description: >-
            Successfully deleted Basic-auth credential or the resource didn't exist
      summary: Delete a a Basic-auth credential associated with a a Consumer
      tags:
        - Basic-auth credentials
    get:
      description: Get a Basic-auth credential associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully fetched Basic-auth credential
        '404':
          description: Resource does not exist
      summary: Fetch a Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: >-
        Create or Update a Basic-auth credential associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/BasicAuthId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuthWithoutParents'
        description: Description of the Basic-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully upserted Basic-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Basic-auth credential
      summary: Upsert a Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/hmac-auth:
    get:
      description: List all HMAC-auth credentials associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/HMACAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing HMAC-auth credentials
      summary: List all HMAC-auth credentials associated with a Consumer
      tags:
        - HMAC-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new HMAC-auth credential associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHMACAuthWithoutParents'
        description: Description of new HMAC-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully created HMAC-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid HMAC-auth credential
      summary: Create a new HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/hmac-auth/{HMACAuthId}:
    delete:
      description: Delete a a HMAC-auth credential associated with a a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        '204':
          description: >-
            Successfully deleted HMAC-auth credential or the resource didn't exist
      summary: Delete a a HMAC-auth credential associated with a a Consumer
      tags:
        - HMAC-auth credentials
    get:
      description: Get a HMAC-auth credential associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully fetched HMAC-auth credential
        '404':
          description: Resource does not exist
      summary: Fetch a HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: >-
        Create or Update a HMAC-auth credential associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/HMACAuthId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHMACAuthWithoutParents'
        description: Description of the HMAC-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully upserted HMAC-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid HMAC-auth credential
      summary: Upsert a HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/jwt:
    get:
      description: List all JWTs associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JWT'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing JWTs
      summary: List all JWTs associated with a Consumer
      tags:
        - JWTs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new JWT associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWTWithoutParents'
        description: Description of new JWT for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully created JWT
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid JWT
      summary: Create a new JWT associated with a Consumer
      tags:
        - JWTs
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/jwt/{JWTId}:
    delete:
      description: Delete a a JWT associated with a a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/JWTId'
      responses:
        '204':
          description: Successfully deleted JWT or the resource didn't exist
      summary: Delete a a JWT associated with a a Consumer
      tags:
        - JWTs
    get:
      description: Get a JWT associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/JWTId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully fetched JWT
        '404':
          description: Resource does not exist
      summary: Fetch a JWT associated with a Consumer
      tags:
        - JWTs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update a JWT associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/JWTId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWTWithoutParents'
        description: Description of the JWT
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully upserted JWT
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid JWT
      summary: Upsert a JWT associated with a Consumer
      tags:
        - JWTs
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/key-auth:
    get:
      description: List all API-keys associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/APIKey'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing API-keys
      summary: List all API-keys associated with a Consumer
      tags:
        - API-keys
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new API-key associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyWithoutParents'
        description: Description of new API-key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: Successfully created API-key
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid API-key
      summary: Create a new API-key associated with a Consumer
      tags:
        - API-keys
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/plugins:
    get:
      description: List all Plugins associated with a a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a Consumer
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Plugin associated with a Consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a Consumer
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}/plugins/{PluginId}:
    delete:
      description: Delete a a Plugin associated with a a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a Plugin associated with a a Consumer
      tags:
        - Plugins
    get:
      description: Get a Plugin associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a Consumer
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update a Plugin associated with a Consumer using ID.
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a Plugin associated with a Consumer
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/hmac-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new HMAC-auth credential
      operationId: create-hmac-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHMACAuth'
        description: Description of the new HMAC-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully created HMAC-auth credential
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid HMAC-auth credential
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new HMAC-auth credential
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation: HMACAuth#create
  /control-planes/{controlPlaneId}/core-entities/hmac-auths/{HMACAuthId}:
    delete:
      description: Delete a HMAC-auth credential
      operationId: delete-hmac-auth
      parameters:
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        '204':
          description: >-
            Successfully deleted HMAC-auth credential or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a HMAC-auth credential
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation: HMACAuth#delete
    get:
      description: Get a HMAC-auth credential using ID.
      operationId: get-hmac-auth
      parameters:
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully fetched HMAC-auth credential
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a HMAC-auth credential
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation: HMACAuth#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/jwts:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new JWT
      operationId: create-jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWT'
        description: Description of the new JWT for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully created JWT
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid JWT
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new JWT
      tags:
        - JWTs
      x-speakeasy-entity-operation: JWT#create
  /control-planes/{controlPlaneId}/core-entities/jwts/{JWTId}:
    delete:
      description: Delete a JWT
      operationId: delete-jwt
      parameters:
        - $ref: '#/components/parameters/JWTId'
      responses:
        '204':
          description: Successfully deleted JWT or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a JWT
      tags:
        - JWTs
      x-speakeasy-entity-operation: JWT#delete
    get:
      description: Get a JWT using ID.
      operationId: get-jwt
      parameters:
        - $ref: '#/components/parameters/JWTId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully fetched JWT
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a JWT
      tags:
        - JWTs
      x-speakeasy-entity-operation: JWT#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/key-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new API-key
      operationId: create-key-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKey'
        description: Description of the new API-key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: Successfully created API-key
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid API-key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new API-key
      tags:
        - API-keys
      x-speakeasy-entity-operation: APIKey#create
  /control-planes/{controlPlaneId}/core-entities/key-sets:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new KeySet
      operationId: create-key-set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeySet'
        description: Description of the new KeySet for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully created KeySet
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation: KeySet#create
  /control-planes/{controlPlaneId}/core-entities/key-sets/{KeySetId}:
    delete:
      description: Delete a KeySet
      operationId: delete-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetId'
      responses:
        '204':
          description: Successfully deleted KeySet or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation: KeySet#delete
    get:
      description: Get a KeySet using ID or name.
      operationId: get-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully fetched KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation: KeySet#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/keys:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Key
      operationId: create-key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKey'
        description: Description of the new Key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Key
      tags:
        - Keys
      x-speakeasy-entity-operation: Key#create
  /control-planes/{controlPlaneId}/core-entities/keys/{KeyId}:
    delete:
      description: Delete a Key
      operationId: delete-key
      parameters:
        - $ref: '#/components/parameters/KeyId'
      responses:
        '204':
          description: Successfully deleted Key or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Key
      tags:
        - Keys
      x-speakeasy-entity-operation: Key#delete
    get:
      description: Get a Key using ID or name.
      operationId: get-key
      parameters:
        - $ref: '#/components/parameters/KeyId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully fetched Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Key
      tags:
        - Keys
      x-speakeasy-entity-operation: Key#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/plugins:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Plugin
      operationId: create-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlugin'
        description: Description of the new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: Plugin#create
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}:
    delete:
      description: Delete a Plugin
      operationId: delete-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: Plugin#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: Plugin#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/routes:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Route
      operationId: create-route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute'
        description: Description of the new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created Route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Route
      tags:
        - Routes
      x-speakeasy-entity-operation: Route#create
  /control-planes/{controlPlaneId}/core-entities/routes/{RouteId}:
    delete:
      description: Delete a Route
      operationId: delete-route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Route
      tags:
        - Routes
      x-speakeasy-entity-operation: Route#delete
    get:
      description: Get a Route using ID or name.
      operationId: get-route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Route
      tags:
        - Routes
      x-speakeasy-entity-operation: Route#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/routes/{RouteId}/plugins:
    get:
      description: List all Plugins associated with a a Route
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a Route
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Plugin associated with a Route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a Route
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/routes/{RouteId}/plugins/{PluginId}:
    delete:
      description: Delete a a Plugin associated with a a Route using ID.
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a Plugin associated with a a Route
      tags:
        - Plugins
    get:
      description: Get a Plugin associated with a Route using ID.
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a Route
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update a Plugin associated with a Route using ID.
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a Plugin associated with a Route
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/services:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Service
      operationId: create-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateService'
        description: Description of the new Service for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully created Service
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Service
      tags:
        - Services
      x-speakeasy-entity-operation: Service#create
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}:
    delete:
      description: Delete a Service
      operationId: delete-service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '204':
          description: Successfully deleted Service or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Service
      tags:
        - Services
      x-speakeasy-entity-operation: Service#delete
    get:
      description: Get a Service using ID or name.
      operationId: get-service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully fetched Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Service
      tags:
        - Services
      x-speakeasy-entity-operation: Service#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/plugins:
    get:
      description: List all Plugins associated with a a Service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a Service
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Plugin associated with a Service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a Service
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/plugins/{PluginId}:
    delete:
      description: Delete a a Plugin associated with a a Service using ID.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a Plugin associated with a a Service
      tags:
        - Plugins
    get:
      description: Get a Plugin associated with a Service using ID.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a Service
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update a Plugin associated with a Service using ID.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginWithoutParents'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a Plugin associated with a Service
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/routes:
    get:
      description: List all Routes associated with a a Service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Routes
      summary: List all Routes associated with a Service
      tags:
        - Routes
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Route associated with a Service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteWithoutParents'
        description: Description of new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created Route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Route
      summary: Create a new Route associated with a Service
      tags:
        - Routes
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/routes/{RouteId}:
    delete:
      description: Delete a a Route associated with a a Service using ID or name.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
      summary: Delete a a Route associated with a a Service
      tags:
        - Routes
    get:
      description: Get a Route associated with a Service using ID or name.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched Route
        '404':
          description: Resource does not exist
      summary: Fetch a Route associated with a Service
      tags:
        - Routes
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update a Route associated with a Service using ID or name.
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteWithoutParents'
        description: Description of the Route
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted Route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Route
      summary: Upsert a Route associated with a Service
      tags:
        - Routes
  /control-planes/{controlPlaneId}/core-entities/snis:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new SNI
      operationId: create-sni
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSNI'
        description: Description of the new SNI for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation: SNI#create
  /control-planes/{controlPlaneId}/core-entities/snis/{SNIId}:
    delete:
      description: Delete an SNI
      operationId: delete-sni
      parameters:
        - $ref: '#/components/parameters/SNIId'
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation: SNI#delete
    get:
      description: Get an SNI using ID or name.
      operationId: get-sni
      parameters:
        - $ref: '#/components/parameters/SNIId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch an SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation: SNI#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Upstream
      operationId: create-upstream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpstream'
        description: Description of the new Upstream for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation: Upstream#create
  /control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamId}:
    delete:
      description: Delete an Upstream
      operationId: delete-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      responses:
        '204':
          description: Successfully deleted Upstream or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation: Upstream#delete
    get:
      description: Get an Upstream using ID or name.
      operationId: get-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch an Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation: Upstream#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamId}/targets:
    get:
      description: List all Targets associated with a an Upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Target'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Targets
      summary: List all Targets associated with an Upstream
      tags:
        - Targets
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Target associated with an Upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTargetWithoutParents'
        description: Description of new Target for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully created Target
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
      summary: Create a new Target associated with an Upstream
      tags:
        - Targets
      operationId: create-target
      x-speakeasy-entity-operation: Target#create
  /control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamId}/targets/{TargetId}:
    delete:
      description: Delete a a Target associated with a an Upstream using ID or target.
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
        - $ref: '#/components/parameters/TargetId'
      responses:
        '204':
          description: Successfully deleted Target or the resource didn't exist
      summary: Delete a a Target associated with a an Upstream
      tags:
        - Targets
      operationId: delete-target
      x-speakeasy-entity-operation: Target#delete
    get:
      description: Get a Target associated with an Upstream using ID or target.
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
        - $ref: '#/components/parameters/TargetId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully fetched Target
        '404':
          description: Resource does not exist
      summary: Fetch a Target associated with an Upstream
      tags:
        - Targets
      operationId: read-target
      x-speakeasy-entity-operation: Target#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: >-
        Create or Update a Target associated with an Upstream using ID or target.
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
        - $ref: '#/components/parameters/TargetId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTargetWithoutParents'
        description: Description of the Target
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully upserted Target
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
      summary: Upsert a Target associated with an Upstream
      tags:
        - Targets
      operationId: update-target
      x-speakeasy-entity-operation: Target#update
  /control-planes/{controlPlaneId}/core-entities/vaults:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Vault
      operationId: create-vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVault'
        description: Description of the new Vault for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation: Vault#create
  /control-planes/{controlPlaneId}/core-entities/vaults/{VaultId}:
    delete:
      description: Delete a Vault
      operationId: delete-vault
      parameters:
        - $ref: '#/components/parameters/VaultId'
      responses:
        '204':
          description: Successfully deleted Vault or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation: Vault#delete
    get:
      description: Get a Vault using ID or prefix.
      operationId: get-vault
      parameters:
        - $ref: '#/components/parameters/VaultId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation: Vault#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
  /control-planes/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: id
        in: path
        required: true
        description: The control plane ID
    get:
      x-speakeasy-entity-operation: GatewayControlPlane#read
      summary: Fetch Control Plane
      responses:
        '200':
          $ref: '#/components/responses/RetrieveControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: get-control-plane
      description: Returns information about a team from a given team ID.
      tags:
        - Control Planes
    patch:
      x-speakeasy-entity-operation: GatewayControlPlane#update
      summary: Update Control Plane
      operationId: update-control-plane
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      description: Update an individual control plane.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlPlaneRequest'
      tags:
        - Control Planes
    delete:
      x-speakeasy-entity-operation: GatewayControlPlane#delete
      summary: Delete Control Plane
      operationId: delete-control-plane
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      description: Delete an individual control plane.
      tags:
        - Control Planes
  /mesh/control-planes:
    servers:
      - url: https://us.api.konghq.com/v1
      - url: https://us.api.konghq.com/v1
    post:
      x-speakeasy-entity-operation: MeshControlPlane#create
      summary: Create a new control plane
      description: Create a new control plane
      operationId: create-cp
      tags:
        - Mesh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeshControlPlaneRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/CreateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
  /mesh/control-planes/{cpId}:
    servers:
      - url: https://us.api.konghq.com/v1
      - url: https://us.api.konghq.com/v1
    parameters:
      - name: cpId
        in: path
        required: true
        description: Id of the Konnect resource
        example: bf138ba2-c9b1-4229-b268-04d9d8a6410b
        schema:
          type: string
          format: uuid
        x-speakeasy-match: id
    get:
      x-speakeasy-entity-operation: MeshControlPlane#read
      summary: Get the control plane
      description: Get the control plane
      operationId: get-mesh-control-plane
      tags:
        - Mesh
      responses:
        '200':
          $ref: '#/components/responses/RetrieveMeshControlPlaneResponse'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
    delete:
      x-speakeasy-entity-operation: MeshControlPlane#delete
      summary: Delete the control plane
      description: Delete the control plane
      operationId: delete-mesh-control-plane
      tags:
        - Mesh
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
    patch:
      x-speakeasy-entity-operation: MeshControlPlane#update
      summary: Update control plane
      operationId: update-mesh-control-plane
      tags:
        - Mesh
      responses:
        '200':
          $ref: '#/components/responses/UpdateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/UpdateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
      description: Update an individual control plane.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeshControlPlaneRequest'
  /portals:
    get:
      x-speakeasy-entity-operation: PortalList#read
      summary: List Portals
      description: >-
        Lists developer portals defined in this region for this organization. Each developer portal is available at a unique address and has isolated appearance, configuration, developers, and applications.
      operationId: list-portals
      tags:
        - Portals
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortPortals'
      responses:
        '200':
          $ref: '#/components/responses/ListPortals'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /portals/{portalId}:
    x-speakeasy-entity-operation: Portal#read
    parameters:
      - $ref: '#/components/parameters/parameters-PortalId'
    patch:
      x-speakeasy-entity-operation: Portal#create,update
      summary: Update Portal
      description: >-
        Updates the configuration for a single portal including the visibility, access, and custom domain settings.
      operationId: update-portal
      requestBody:
        $ref: '#/components/requestBodies/UpdatePortal'
      tags:
        - Portals
      responses:
        '200':
          $ref: '#/components/responses/UpdatePortal'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /portals/{portalId}/authentication-settings:
    parameters:
      - $ref: '#/components/parameters/parameters-PortalId'
    get:
      x-speakeasy-entity-operation: PortalAuth#read
      summary: Get Auth Settings
      description: >-
        Returns the developer authentication configuration for a portal, which determines how developers can log in and how they are assigned to teams.
      operationId: get-portal-authentication-settings
      tags:
        - Portal Auth Settings
      responses:
        '200':
          $ref: '#/components/responses/PortalAuthenticationSettings'
        '401':
          $ref: '#/components/responses/Unauthorized'
    patch:
      x-speakeasy-entity-operation: PortalAuth#create,update
      summary: Update Auth Settings
      description: >-
        Updates the developer authentication configuration for a portal. Developers can be allowed to login using basic auth (email & password) or use Single-Sign-On (SSO) through an OIDC Identity Provider (IdP). Developers can be automatically assigned to teams by mapping claims from thier IdP account.
      operationId: update-portal-authentication-settings
      requestBody:
        $ref: '#/components/requestBodies/UpdatePortalAuthenticationSettings'
      tags:
        - Portal Auth Settings
      responses:
        '200':
          $ref: '#/components/responses/PortalAuthenticationSettings'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /control-planes/{controlPlaneId}/core-entities/plugins#BasicAuth:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginBasicAuth#create
      description: Create a new BasicAuth Plugin
      summary: Create a new BasicAuth Plugin
      tags:
        - Plugins
      operationId: create-basicauth-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuthPlugin'
        description: Create a new BasicAuth plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#BasicAuth:
    delete:
      description: Delete a Plugin
      operationId: delete-basicauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginBasicAuth#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-basicauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginBasicAuth#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-basicauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuthPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginBasicAuth#update
  /control-planes/{controlPlaneId}/core-entities/plugins#RateLimiting:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginRateLimiting#create
      description: Create a new RateLimiting Plugin
      summary: Create a new RateLimiting Plugin
      tags:
        - Plugins
      operationId: create-ratelimiting-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRateLimitingPlugin'
        description: Create a new RateLimiting plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#RateLimiting:
    delete:
      description: Delete a Plugin
      operationId: delete-ratelimiting-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRateLimiting#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-ratelimiting-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRateLimiting#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-ratelimiting-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRateLimitingPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRateLimiting#update
  /control-planes/{controlPlaneId}/core-entities/plugins#AIProxy:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginAIProxy#create
      description: Create a new AIProxy Plugin
      summary: Create a new AIProxy Plugin
      tags:
        - Plugins
      operationId: create-aiproxy-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAIProxyPlugin'
        description: Create a new AIProxy plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIProxyPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#AIProxy:
    delete:
      description: Delete a Plugin
      operationId: delete-aiproxy-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginAIProxy#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-aiproxy-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIProxyPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginAIProxy#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-aiproxy-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAIProxyPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIProxyPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginAIProxy#update
  /control-planes/{controlPlaneId}/core-entities/plugins#KeyAuth:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginKeyAuth#create
      description: Create a new KeyAuth Plugin
      summary: Create a new KeyAuth Plugin
      tags:
        - Plugins
      operationId: create-keyauth-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyAuthPlugin'
        description: Create a new KeyAuth plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuthPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#KeyAuth:
    delete:
      description: Delete a Plugin
      operationId: delete-keyauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginKeyAuth#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-keyauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuthPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginKeyAuth#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-keyauth-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyAuthPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuthPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginKeyAuth#update
  /control-planes/{controlPlaneId}/core-entities/plugins#RequestTransformer:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginRequestTransformer#create
      description: Create a new RequestTransformer Plugin
      summary: Create a new RequestTransformer Plugin
      tags:
        - Plugins
      operationId: create-requesttransformer-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestTransformerPlugin'
        description: Create a new RequestTransformer plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTransformerPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#RequestTransformer:
    delete:
      description: Delete a Plugin
      operationId: delete-requesttransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRequestTransformer#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-requesttransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTransformerPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRequestTransformer#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-requesttransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestTransformerPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTransformerPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginRequestTransformer#update
  /control-planes/{controlPlaneId}/core-entities/plugins#CORS:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginCORS#create
      description: Create a new CORS Plugin
      summary: Create a new CORS Plugin
      tags:
        - Plugins
      operationId: create-cors-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCORSPlugin'
        description: Create a new CORS plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CORSPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#CORS:
    delete:
      description: Delete a Plugin
      operationId: delete-cors-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginCORS#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-cors-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CORSPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginCORS#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-cors-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCORSPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CORSPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginCORS#update
  /control-planes/{controlPlaneId}/core-entities/plugins#ACL:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginACL#create
      description: Create a new ACL Plugin
      summary: Create a new ACL Plugin
      tags:
        - Plugins
      operationId: create-acl-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACLPlugin'
        description: Create a new ACL plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#ACL:
    delete:
      description: Delete a Plugin
      operationId: delete-acl-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginACL#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-acl-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginACL#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-acl-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACLPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginACL#update
  /control-planes/{controlPlaneId}/core-entities/plugins#ExitTransformer:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginExitTransformer#create
      description: Create a new ExitTransformer Plugin
      summary: Create a new ExitTransformer Plugin
      tags:
        - Plugins
      operationId: create-exittransformer-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExitTransformerPlugin'
        description: Create a new ExitTransformer plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitTransformerPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#ExitTransformer:
    delete:
      description: Delete a Plugin
      operationId: delete-exittransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginExitTransformer#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-exittransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitTransformerPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginExitTransformer#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-exittransformer-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExitTransformerPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitTransformerPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginExitTransformer#update
  /control-planes/{controlPlaneId}/core-entities/plugins#Prometheus:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginPrometheus#create
      description: Create a new Prometheus Plugin
      summary: Create a new Prometheus Plugin
      tags:
        - Plugins
      operationId: create-prometheus-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrometheusPlugin'
        description: Create a new Prometheus plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#Prometheus:
    delete:
      description: Delete a Plugin
      operationId: delete-prometheus-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginPrometheus#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-prometheus-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginPrometheus#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-prometheus-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrometheusPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginPrometheus#update
  /control-planes/{controlPlaneId}/core-entities/plugins#ApplicationRegistration:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      x-speakeasy-entity-operation: PluginApplicationRegistration#create
      description: Create a new ApplicationRegistration Plugin
      summary: Create a new ApplicationRegistration Plugin
      tags:
        - Plugins
      operationId: create-applicationregistration-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRegistrationPlugin'
        description: Create a new ApplicationRegistration plugin
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistrationPlugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}#ApplicationRegistration:
    delete:
      description: Delete a Plugin
      operationId: delete-applicationregistration-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginApplicationRegistration#delete
    get:
      description: Get a Plugin using ID.
      operationId: get-applicationregistration-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistrationPlugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginApplicationRegistration#read
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: update-applicationregistration-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRegistrationPlugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistrationPlugin'
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation: PluginApplicationRegistration#update
components:
  parameters:
    PageSize:
      name: page[size]
      description: >-
        The maximum number of items to include per page. The last page of a collection may include fewer items.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 10
    PageNumber:
      name: page[number]
      description: Determines which page of the entities to retrieve.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 1
    ACLId:
      description: ID of the ACL to lookup
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ACLId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    BasicAuthId:
      description: ID of the Basic-auth credential to lookup
      example: 80db1b58-ca7c-4d21-b92a-64eb07725872
      in: path
      name: BasicAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    CACertificateId:
      description: ID of the CA Certificate to lookup
      example: 3c31f18a-f27a-4f9b-8cd4-bf841554612f
      in: path
      name: CACertificateId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    CertificateId:
      description: ID of the Certificate to lookup
      example: ddf3cdaa-3329-4961-822a-ce6dbd38eff7
      in: path
      name: CertificateId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ConsumerGroupId:
      description: ID of the Consumer Group to lookup
      example: ''
      in: path
      name: ConsumerGroupId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ConsumerId:
      description: ID of the Consumer to lookup
      example: c1059869-6fa7-4329-a5f5-5946d14ca2c5
      in: path
      name: ConsumerId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ControlPlaneId:
      description: >-
        The UUID of your control plane. This variable is available in the Konnect manager.
      example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
      in: path
      name: controlPlaneId
      required: true
      schema:
        format: uuid
        type: string
    HMACAuthId:
      description: ID of the HMAC-auth credential to lookup
      example: 70e7b00b-72f2-471b-a5ce-9c4171775360
      in: path
      name: HMACAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    JWTId:
      description: ID of the JWT to lookup
      example: 4a7f5faa-8c96-46d6-8214-c87573ef2ac4
      in: path
      name: JWTId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    KeyId:
      description: ID of the Key to lookup
      example: bba22c06-a632-42be-a018-1b9ff357b5b9
      in: path
      name: KeyId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    KeySetId:
      description: ID of the KeySet to lookup
      example: 6cc34248-50b4-4a81-9201-3bdf7a83f712
      in: path
      name: KeySetId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    PaginationOffset:
      description: >-
        Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources
      in: query
      name: offset
      schema:
        type: string
    PaginationSize:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    PaginationTagsFilter:
      description: >-
        A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    PluginId:
      description: ID of the Plugin to lookup
      example: 3473c251-5b6c-4f45-b1ff-7ede735a366d
      in: path
      name: PluginId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    RouteId:
      description: ID of the Route to lookup
      example: a4326a41-aa12-44e3-93e4-6b6e58bfb9d7
      in: path
      name: RouteId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    SNIId:
      description: ID of the SNI to lookup
      example: 64c17a1a-b7d7-4a65-a5a4-42e4a7016e7f
      in: path
      name: SNIId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ServiceId:
      description: ID of the Service to lookup
      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      in: path
      name: ServiceId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    TargetId:
      description: ID of the Target to lookup
      example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
      in: path
      name: TargetId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    UpstreamId:
      description: ID of the Upstream to lookup
      example: 426d620c-7058-4ae6-aacc-f85a3204a2c5
      in: path
      name: UpstreamId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    VaultId:
      description: ID of the Vault to lookup
      example: 9d4d6d19-77c6-428e-a965-9bc9647633e9
      in: path
      name: VaultId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    SortPortals:
      name: sort
      description: |
        Sorts a collection of portals. Supported sort attributes are:
          - created_at
          - updated_at
      in: query
      required: false
      schema:
        type: string
    parameters-PortalId:
      schema:
        type: string
        format: uuid
      name: portalId
      in: path
      required: true
      description: ID of the portal.
  responses:
    RetrieveControlPlaneResponse:
      description: A response to retrieving a single control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    CreateControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    UpdateControlPlaneResponse:
      description: A response to updating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    ControlPlanesBadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    ControlPlanePermissionDenied:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    ControlPlaneUnauthenticated:
      description: Unauthenticated
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    ControlPlaneNotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    ControlPlaneConflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            title: InternalServerError
            type: object
            description: The error response object.
            properties:
              status:
                type: integer
                description: The HTTP status code.
                example: 500
                enum:
                  - 500
              title:
                type: string
                description: The error response code.
                example: Internal Server Error
              instance:
                type: string
                example: konnect:trace:2287285207635123011
                description: The Konnect traceback code
              detail:
                type: string
                example: >-
                  Could not propagate control plane changes to control plane cluster service.
                description: Details about the error.
            required:
              - status
              - title
              - instance
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            title: ServiceUnavailableError
            type: object
            description: Error response for temporary service unavailability.
            properties:
              status:
                type: integer
                description: The HTTP status code.
                example: 503
                enum:
                  - 503
              title:
                type: string
                description: The error response code.
                example: Service Unavailable
              instance:
                type: string
                example: konnect:trace:2287285207635123011
                description: The Konnect traceback code
              detail:
                type: string
                example: >-
                  Could not retrieve permissions to check resource accessibility.
                description: Details about the error.
            required:
              - status
              - title
              - instance
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    HTTP401Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: Unauthorized
    RetrieveMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
    CreateMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
    CreateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    UpdateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    MeshControlPlaneForbiddenError:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    MeshControlPlaneUnauthorizedError:
      description: Unauthorized Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    MeshControlPlaneNotFoundError:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    UpdateMeshControlPlaneResponse:
      description: A response to updating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
    ApiProductUnauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    ApiProductNotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    APIProductResponse:
      description: API product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIProduct'
    APIProductVersionResponse:
      description: API product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIProductVersion'
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnsupportedMediaTypeError'
    PortalAuthenticationSettings:
      description: Details about a portal's authentication settings.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalAuthenticationSettingsResponse'
    ListPortals:
      description: A paginated list of portals in the current region of an organization.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListPortalsResponse'
    UpdatePortal:
      description: Details about the portal being updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePortalResponse'
  schemas:
    CreateControlPlaneRequest:
      x-speakeasy-entity: GatewayControlPlane
      title: CreateControlPlaneRequest
      description: The request schema for the create control plane request.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        cluster_type:
          type: string
          description: >-
            The ClusterType value of the cluster associated with the Control Plane.
          example: CLUSTER_TYPE_HYBRID
          enum:
            - CLUSTER_TYPE_HYBRID
            - CLUSTER_TYPE_K8S_INGRESS_CONTROLLER
            - CLUSTER_TYPE_CONTROL_PLANE_GROUP
        auth_type:
          type: string
          description: >-
            The auth type value of the cluster associated with the Runtime Group.
          example: pinned_client_certs
          enum:
            - pinned_client_certs
            - pki_client_certs
        cloud_gateway:
          type: boolean
          description: Whether this control-plane can be used for cloud-gateways.
          example: false
        proxy_urls:
          $ref: '#/components/schemas/ProxyURLs'
        labels:
          $ref: '#/components/schemas/Labels'
      required:
        - name
    UpdateControlPlaneRequest:
      title: UpdateControlPlaneRequest
      description: The request schema for the update control plane request.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        auth_type:
          type: string
          description: >-
            The auth type value of the cluster associated with the Runtime Group.
          example: pinned_client_certs
          enum:
            - pinned_client_certs
            - pki_client_certs
        proxy_urls:
          $ref: '#/components/schemas/ProxyURLs'
        labels:
          $ref: '#/components/schemas/Labels'
    ControlPlane:
      x-speakeasy-entity: GatewayControlPlane
      allOf:
        - $ref: '#/components/schemas/ControlPlaneSummary'
        - type: object
          properties:
            labels:
              $ref: '#/components/schemas/Labels'
            config:
              x-speakeasy-param-suppress-computed-diff: true
              type: object
              description: CP configuration object for related access endpoints.
              properties:
                control_plane_endpoint:
                  type: string
                  format: url
                  example: https://acfe5f253f.cp0.konghq.com
                  description: Control Plane Endpoint.
                  readOnly: true
                telemetry_endpoint:
                  type: string
                  format: url
                  example: https://acfe5f253f.tp0.konghq.com
                  description: Telemetry Endpoint.
                  readOnly: true
            created_at:
              x-speakeasy-terraform-ignore: true
              type: string
              format: date-time
              example: '2022-11-04T20:10:06.927Z'
              description: >-
                An ISO-8604 timestamp representation of control plane creation date.
              readOnly: true
            updated_at:
              x-speakeasy-terraform-ignore: true
              type: string
              format: date-time
              example: '2022-11-04T20:10:06.927Z'
              description: >-
                An ISO-8604 timestamp representation of control plane update date.
              readOnly: true
    ControlPlaneSummary:
      title: ControlPlaneSummary
      type: object
      description: >-
        The control plane object contains information about a Kong control plane.
      additionalProperties: false
      properties:
        id:
          x-speakeasy-param-suppress-computed-diff: true
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The control plane ID.
          readOnly: true
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        labels:
          $ref: '#/components/schemas/Labels'
        config:
          type: object
          description: CP configuration object for related access endpoints.
          additionalProperties: false
          properties:
            control_plane_endpoint:
              type: string
              format: url
              example: https://acfe5f253f.cp0.konghq.com
              description: Control Plane Endpoint.
              readOnly: true
            telemetry_endpoint:
              type: string
              format: url
              example: https://acfe5f253f.tp0.konghq.com
              description: Telemetry Endpoint.
              readOnly: true
            cluster_type:
              type: string
              description: >-
                The ClusterType value of the cluster associated with the Control Plane.
              example: CLUSTER_TYPE_HYBRID
              enum:
                - CLUSTER_TYPE_HYBRID
                - CLUSTER_TYPE_K8S_INGRESS_CONTROLLER
                - CLUSTER_TYPE_CONTROL_PLANE_GROUP
              readOnly: true
            auth_type:
              type: string
              description: >-
                The auth type value of the cluster associated with the Runtime Group.
              example: pinned_client_certs
              enum:
                - pinned_client_certs
                - pki_client_certs
              readOnly: true
            cloud_gateway:
              type: boolean
              description: Whether the Control Plane can be used for cloud-gateways.
              readOnly: true
            proxy_urls:
              $ref: '#/components/schemas/ProxyURLs'
          required:
            - control_plane_endpoint
            - telemetry_endpoint
            - cluster_type
            - auth_type
            - cloud_gateway
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Labels:
      x-speakeasy-type-override: any
      title: Labels
      type: object
      example:
        env: test
      description: >-
        Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'.
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z\-\.\_]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
    ProxyURL:
      title: ProxyURL
      description: >-
        Proxy URL associated with reaching the data-planes connected to a control-plane.
      type: object
      additionalProperties: false
      properties:
        host:
          type: string
          description: Hostname of the proxy URL.
        port:
          type: integer
          description: Port of the proxy URL.
        protocol:
          type: string
          description: Protocol of the proxy URL.
      required:
        - host
        - port
        - protocol
      example:
        host: example.com
        port: 443
        protocol: https
    ProxyURLs:
      title: ProxyURLs
      description: >-
        Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
      type: array
      items:
        $ref: '#/components/schemas/ProxyURL'
      example:
        - host: example.com
          port: 443
          protocol: https
    PageMeta:
      type: object
      description: >-
        Contains pagination query parameters and the total number of objects returned.
      required:
        - number
        - size
        - total
      properties:
        number:
          type: number
          example: 1
        size:
          type: number
          example: 10
        total:
          type: number
          example: 100
    PaginatedMeta:
      type: object
      title: PaginatedMeta
      description: returns the pagination information
      properties:
        page:
          $ref: '#/components/schemas/PageMeta'
      required:
        - page
    BaseError:
      type: object
      title: Error
      description: standard error
      required:
        - status
        - title
        - instance
        - detail
      properties:
        status:
          type: integer
          description: >
            The HTTP status code of the error. Useful when passing the response

            body to child properties in a frontend UI. Must be returned as an integer.

          readOnly: true
        title:
          type: string
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          readOnly: true
        type:
          type: string
          description: The error type.
          readOnly: true
        instance:
          type: string
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          readOnly: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurence of the problem.

            This field may contain request/entity data to help the user understand

            what went wrong. Enclose variable values in square brackets. Should be

            provided as "Sentence case" for direct use in the UI.

          readOnly: true
    InvalidRules:
      description: invalid parameters rules
      type: string
      readOnly: true
      nullable: true
      enum:
        - required
        - enum
        - min_length
        - max_length
        - min_digits
        - min_lowercase
        - min_uppercase
        - min_symbols
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - unknown_property
        - is_label
        - matches_regex
    InvalidParameterChoiceItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - reason
    InvalidParameterDependentItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: true
          enum:
            - dependent_fields
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameters:
      type: array
      nullable: false
      uniqueItems: true
      minItems: 1
      description: invalid parameters
      items:
        $ref: '#/components/schemas/InvalidParameterChoiceItem'
    BadRequestError:
      type: object
      required:
        - invalid_parameters
      properties:
        status:
          example: 400
        title:
          example: Bad Request
        type:
          example: https://httpstatuses.com/400
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid request body
        invalid_parameters:
          $ref: '#/components/schemas/InvalidParameters'
      allOf:
        - $ref: '#/components/schemas/BaseError'
    UnauthorizedError:
      type: object
      properties:
        status:
          example: 401
          type: integer
        title:
          example: Unauthorized
        type:
          example: https://httpstatuses.com/401
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid credentials
        message:
          type: string
      allOf:
        - $ref: '#/components/schemas/BaseError'
      required:
        - message
        - status
    ForbiddenError:
      type: object
      properties:
        status:
          example: 403
        title:
          example: Forbidden
        type:
          example: https://httpstatuses.com/403
        instance:
          example: kong:trace:1234567890
        detail:
          example: Forbidden
      allOf:
        - $ref: '#/components/schemas/BaseError'
    ConflictError:
      type: object
      properties:
        status:
          example: 409
        title:
          example: Conflict
        type:
          example: https://httpstatuses.com/409
        instance:
          example: kong:trace:1234567890
        detail:
          example: Conflict
      allOf:
        - $ref: '#/components/schemas/BaseError'
    NotFoundError:
      type: object
      properties:
        status:
          example: 404
        title:
          example: Not Found
        type:
          example: https://httpstatuses.com/404
        instance:
          example: kong:trace:1234567890
        detail:
          example: Not found
      allOf:
        - $ref: '#/components/schemas/BaseError'
    ACL:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            group: foo
            id: b1f34145-0343-41a4-9602-4c69dec2f269
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateACL'
    APIKey:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateAPIKey'
    BaseService:
      description: >-
        Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc. The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its `protocol`, `host`, `port` and `path` individually. Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the [Proxy Reference][proxy-reference] for a detailed explanation of how Kong proxies traffic.
      required:
        - protocol
        - host
        - port
      type: object
    BasicAuth:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            password: hashedsoopersecretvalue
            username: darius
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateBasicAuth'
    CACertificate:
      allOf:
        - example:
            cert: |-
              -----BEGIN CERTIFICATE-----
              certificate-content
              -----END CERTIFICATE-----
            id: b2f34145-0343-41a4-9602-4c69dec2f260
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateCACertificate'
    Certificate:
      allOf:
        - example:
            cert: |-
              -----BEGIN CERTIFICATE-----
              certificate-content
              -----END CERTIFICATE-----
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            key: |-
              -----BEGIN PRIVATE KEY-----
              private-key-content
              -----END PRIVATE KEY-----
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateCertificate'
    Consumer:
      allOf:
        - example:
            custom_id: '4200'
            id: 8a388226-80e8-4027-a486-25e4f7db5d21
            tags:
              - silver-tier
            username: bob-the-builder
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateConsumer'
    ConsumerGroup:
      allOf:
        - properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateConsumerGroup'
    CreateACL:
      allOf:
        - $ref: '#/components/schemas/CreateACLWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateACLWithoutParents:
      properties:
        group:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateAPIKey:
      allOf:
        - $ref: '#/components/schemas/CreateAPIKeyWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateAPIKeyWithoutParents:
      properties:
        key:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateBasicAuth:
      allOf:
        - $ref: '#/components/schemas/CreateBasicAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateBasicAuthWithoutParents:
      properties:
        password:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    CreateCACertificate:
      allOf:
        - $ref: '#/components/schemas/CreateCACertificateWithoutParents'
        - description: >-
            A CA certificate object represents a trusted CA. These objects are used by Kong to verify the validity of a client or server certificate.
          required:
            - cert
          type: object
    CreateCACertificateWithoutParents:
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          type: string
        cert_digest:
          description: >-
            SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateCertificate:
      allOf:
        - $ref: '#/components/schemas/CreateCertificateWithoutParents'
        - description: >-
            A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames. If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.
          required:
            - cert
            - key
          type: object
    CreateCertificateWithoutParents:
      properties:
        cert:
          description: >-
            PEM-encoded public certificate chain of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        cert_alt:
          description: >-
            PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key:
          description: >-
            PEM-encoded private key of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key_alt:
          description: >-
            PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateConsumer:
      allOf:
        - $ref: '#/components/schemas/CreateConsumerWithoutParents'
        - description: >-
            The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.
          type: object
    CreateConsumerGroup:
      allOf:
        - $ref: '#/components/schemas/CreateConsumerGroupWithoutParents'
        - required:
            - name
          type: object
    CreateConsumerGroupWithoutParents:
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateConsumerWithoutParents:
      properties:
        custom_id:
          description: >-
            Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Consumer for grouping and filtering.
          items:
            type: string
          type: array
        username:
          description: >-
            The unique username of the Consumer. You must send either this field or `custom_id` with the request.
          type: string
      type: object
    CreateHMACAuth:
      allOf:
        - $ref: '#/components/schemas/CreateHMACAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateHMACAuthWithoutParents:
      properties:
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    CreateJWT:
      allOf:
        - $ref: '#/components/schemas/CreateJWTWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateJWTWithoutParents:
      properties:
        algorithm:
          default: HS256
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
          type: string
        key:
          type: string
        rsa_public_key:
          type: string
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateKey:
      allOf:
        - $ref: '#/components/schemas/CreateKeyWithoutParents'
        - description: >-
            A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
          required:
            - kid
          type: object
    CreateKeySet:
      allOf:
        - $ref: '#/components/schemas/CreateKeySetWithoutParents'
        - type: object
    CreateKeySetWithoutParents:
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateKeyWithoutParents:
      properties:
        jwk:
          description: A JSON Web Key represented as a string.
          type: string
        kid:
          description: A unique identifier for a key.
          type: string
        name:
          description: The name to associate with the given keys.
          type: string
        pem:
          description: A keypair in PEM format.
          properties:
            private_key:
              type: string
            public_key:
              type: string
          type: object
        set:
          additionalProperties: false
          description: The id (an UUID) of the key-set with which to associate the key.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        tags:
          description: >-
            An optional set of strings associated with the Key for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreatePlugin:
      allOf:
        - $ref: '#/components/schemas/CreatePluginWithoutParents'
        - description: >-
            A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
          properties:
            consumer:
              additionalProperties: false
              description: >-
                If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            route:
              additionalProperties: false
              description: >-
                If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            service:
              additionalProperties: false
              description: >-
                If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          required:
            - name
            - config
          type: object
    CreatePluginWithoutParents:
      properties:
        enabled:
          default: true
          description: Whether the plugin is applied.
          type: boolean
        name:
          description: >-
            The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
          type: string
        protocols:
          default:
            - grpc
            - grpcs
            - http
            - https
          description: >-
            A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        tags:
          description: >-
            An optional set of strings associated with the Plugin for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateRoute:
      allOf:
        - $ref: '#/components/schemas/CreateRouteWithoutParents'
        - description: >-
            Route entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service. The combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the Route.
          properties:
            service:
              additionalProperties: false
              description: >-
                The Service this Route is associated to. This is where the Route proxies traffic to.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateRouteWithoutParents:
      properties:
        destinations:
          description: >-
            A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        headers:
          additionalProperties: true
          description: >-
            One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
          type: object
        hosts:
          description: >-
            A list of domain names that match this Route. Note that the hosts value is case sensitive.
          items:
            type: string
          type: array
        https_redirect_status_code:
          default: 426
          description: >-
            The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
          enum:
            - 426
            - 301
            - 302
            - 307
            - 308
          type: integer
        methods:
          description: A list of HTTP methods that match this Route.
          type: array
          items:
            type: string
        name:
          description: >-
            The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
          type: string
        path_handling:
          default: v0
          description: >-
            Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
          enum:
            - v0
            - v1
          type: string
        paths:
          description: A list of paths that match this Route.
          items:
            type: string
          type: array
        preserve_host:
          default: false
          description: >-
            When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
          type: boolean
        protocols:
          default:
            - http
            - https
          description: >-
            An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        regex_priority:
          default: 0
          description: >-
            A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
          type: integer
        request_buffering:
          default: true
          description: >-
            Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
          type: boolean
        response_buffering:
          default: true
          description: >-
            Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
          type: boolean
        snis:
          description: A list of SNIs that match this Route when using stream routing.
          type: array
        sources:
          description: >-
            A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        strip_path:
          default: true
          description: >-
            When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
          type: boolean
        tags:
          description: >-
            An optional set of strings associated with the Route for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateSNI:
      allOf:
        - $ref: '#/components/schemas/CreateSNIWithoutParents'
        - description: >-
            An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.
          properties:
            certificate:
              additionalProperties: false
              description: >-
                The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          required:
            - name
            - certificate
          type: object
    CreateSNIWithoutParents:
      properties:
        name:
          description: The SNI name to associate with the given certificate.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the SNIs for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateService:
      allOf:
        - properties:
            url:
              description: >-
                Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
              type: string
          type: object
        - $ref: '#/components/schemas/CreateServiceWithoutParents'
    CreateServiceWithoutParents:
      properties:
        ca_certificates:
          description: >-
            Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
          items:
            type: string
          type: array
        client_certificate:
          additionalProperties: false
          description: >-
            Certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        connect_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds for establishing a connection to the upstream server.
          type: integer
        enabled:
          default: true
          description: >-
            Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
          type: boolean
        host:
          description: >-
            The host of the upstream server. Note that the host value is case sensitive.
          type: string
        name:
          description: The Service name.
          type: string
        path:
          description: The path to be used in requests to the upstream server.
          type: string
        port:
          default: 80
          description: The upstream server port.
          type: integer
        protocol:
          default: http
          description: The protocol used to communicate with the upstream.
          enum:
            - grpc
            - grpcs
            - http
            - https
            - tcp
            - tls
            - tls_passthrough
            - udp
            - ws
            - wss
          type: string
        read_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
          type: integer
        retries:
          default: 5
          description: The number of retries to execute upon failure to proxy.
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Service for grouping and filtering.
          items:
            type: string
          type: array
        tls_verify:
          description: >-
            Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
          type: boolean
        tls_verify_depth:
          description: >-
            Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
          type: integer
        write_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
          type: integer
      type: object
    CreateTarget:
      allOf:
        - $ref: '#/components/schemas/CreateTargetWithoutParents'
        - description: >-
            A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly. To disable a target, post a new one with `weight=0`; alternatively, use the `DELETE` convenience method to accomplish the same. The current target object definition is the one with the latest `created_at`.
          properties:
            upstream:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
      x-speakeasy-entity: Target
    CreateTargetWithoutParents:
      properties:
        tags:
          description: >-
            An optional set of strings associated with the Target for grouping and filtering.
          items:
            type: string
          type: array
        target:
          description: >-
            The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.
          type: string
        weight:
          default: 100
          description: >-
            The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.
          type: integer
      type: object
    CreateUpstream:
      allOf:
        - $ref: '#/components/schemas/CreateUpstreamWithoutParents'
        - description: >-
            The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named `service.v1.xyz` for a Service object whose `host` is `service.v1.xyz`. Requests for this Service would be proxied to the targets defined within the upstream. An upstream also includes a [health checker][healthchecks], which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
          required:
            - name
          type: object
    CreateUpstreamWithoutParents:
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          enum:
            - consistent-hashing
            - least-connections
            - round-robin
          type: string
        client_certificate:
          additionalProperties: false
          description: >-
            If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        hash_fallback:
          default: none
          description: >-
            What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_fallback_header:
          description: >-
            The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
          type: string
        hash_fallback_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
          type: string
        hash_fallback_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
          type: string
        hash_on:
          default: none
          description: >-
            What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_on_cookie:
          description: >-
            The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
          type: string
        hash_on_cookie_path:
          default: /
          description: >-
            The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
          type: string
        hash_on_header:
          description: >-
            The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
          type: string
        hash_on_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
          type: string
        hash_on_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
          type: string
        healthchecks:
          properties:
            active:
              properties:
                concurrency:
                  default: 10
                  type: integer
                headers:
                  additionalProperties: true
                  type: object
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 302
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    successes:
                      default: 0
                      type: integer
                  type: object
                http_path:
                  default: /
                  type: string
                https_sni:
                  type: string
                https_verify_certificate:
                  default: true
                  type: boolean
                timeout:
                  default: 1
                  type: number
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            passive:
              properties:
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      items:
                        type: integer
                      type: array
                    successes:
                      default: 0
                      type: integer
                  type: object
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 500
                        - 503
                      items:
                        type: integer
                      type: array
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            threshold:
              default: 0
              type: number
          type: object
        host_header:
          description: >-
            The hostname to be used as `Host` header when proxying requests through Kong.
          type: string
        name:
          description: This is a hostname, which must be equal to the `host` of a Service.
          type: string
        slots:
          default: 10000
          description: >-
            The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Upstream for grouping and filtering.
          items:
            type: string
          type: array
        use_srv_name:
          default: false
          description: >-
            If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
          type: boolean
      type: object
    CreateVault:
      allOf:
        - $ref: '#/components/schemas/CreateVaultWithoutParents'
        - description: >-
            Vault entities are used to configure different Vault connectors. Examples of Vaults are Environment Variables, Hashicorp Vault and AWS Secrets Manager. Configuring a Vault allows referencing the secrets with other entities. For example a certificate entity can store a reference to a certificate and key, stored in a vault, instead of storing the certificate and key within the entity. This allows a proper separation of secrets and configuration and prevents secret sprawl.
          type: object
    CreateVaultWithoutParents:
      properties:
        config:
          description: >-
            The configuration properties for the Vault which can be found on the vaults' documentation page.
          type: object
          x-speakeasy-type-override: any
        description:
          description: The description of the Vault entity.
          type: string
        name:
          description: >-
            The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.
          type: string
        prefix:
          description: >-
            The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Vault for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    HMACAuth:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: 75695322-e8a0-4109-aed4-5416b0308d85
            secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
            username: xerxes
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateHMACAuth'
    JWT:
      allOf:
        - example:
            algorithm: HS256
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: 75695322-e8a0-4109-aed4-5416b0308d85
            key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
            secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateJWT'
    Key:
      allOf:
        - example:
            id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
            jwk: '{"alg":"RSA",  "kid": "42",  ...}'
            kid: '42'
            name: a-key
            pem:
              private_key: '-----BEGIN'
              public_key: '-----BEGIN'
            set:
              id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateKey'
    KeySet:
      allOf:
        - example:
            id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
            name: example-key-set
            tags:
              - idp-keys
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateKeySet'
    PaginationOffsetResponse:
      description: >-
        Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page
      type: string
    Plugin:
      allOf:
        - example:
            config:
              anonymous: null
              hide_credentials: false
              key_in_body: false
              key_in_header: true
              key_in_query: true
              key_names:
                - apikey
              run_on_preflight: true
            enabled: true
            id: 3fd1eea1-885a-4011-b986-289943ff8177
            name: key-auth
            protocols:
              - grpc
              - grpcs
              - http
              - https
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          required:
            - enabled
            - protocols
          type: object
        - $ref: '#/components/schemas/CreatePlugin'
    Route:
      allOf:
        - example:
            hosts:
              - foo.example.com
              - foo.example.us
            id: 56c4566c-14cc-4132-9011-4139fcbbe50a
            name: example-route
            paths:
              - /v1
              - /v2
            service:
              id: bd380f99-659d-415e-b0e7-72ea05df3218
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateRoute'
    SNI:
      allOf:
        - example:
            certificate:
              id: bd380f99-659d-415e-b0e7-72ea05df3218
            id: 36c4566c-14cc-4132-9011-4139fcbbe50a
            name: some.example.org
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateSNI'
    Service:
      allOf:
        - example:
            host: example.internal
            id: 49fd316e-c457-481c-9fc7-8079153e4f3c
            name: example-service
            path: /
            port: 80
            protocol: http
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          required:
            - connect_timeout
            - created_at
            - enabled
            - host
            - id
            - name
            - path
            - port
            - protocol
            - read_timeout
            - retries
            - updated_at
            - write_timeout
          type: object
        - $ref: '#/components/schemas/BaseService'
    Target:
      allOf:
        - example:
            id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
            target: 203.0.113.42
            upstream:
              id: 5f1d7e76-2fed-4806-a6af-869984f025cb
            weight: 100
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: number
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateTarget'
      x-speakeasy-entity: Target
    Upstream:
      allOf:
        - example:
            algorithm: round-robin
            hash_fallback: none
            hash_on: none
            hash_on_cookie_path: /
            healthchecks:
              active:
                concurrency: 10
                healthy:
                  http_statuses:
                    - 200
                    - 302
                  interval: 0
                  successes: 0
                http_path: /
                https_verify_certificate: true
                timeout: 1
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 404
                    - 500
                    - 501
                    - 502
                    - 503
                    - 504
                    - 505
                  interval: 0
                  tcp_failures: 0
                  timeouts: 0
              passive:
                healthy:
                  http_statuses:
                    - 200
                    - 201
                    - 202
                    - 203
                    - 204
                    - 205
                    - 206
                    - 207
                    - 208
                    - 226
                    - 300
                    - 301
                    - 302
                    - 303
                    - 304
                    - 305
                    - 306
                    - 307
                    - 308
                  successes: 0
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 500
                    - 503
                  tcp_failures: 0
                  timeouts: 0
              threshold: 0
            id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
            name: api.example.internal
            slots: 10000
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateUpstream'
    Vault:
      allOf:
        - example:
            config:
              prefix: ENV_PREFIX
            description: environment variable based vault
            id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
            name: env
            tags:
              - foo
              - bar
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateVault'
    MeshControlPlaneLabels:
      title: Labels
      type: object
      nullable: true
      example:
        test: 'true'
      description: >-
        Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
      maxProperties: 10
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z\-\.\_]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
        nullable: true
    MeshControlPlane:
      type: object
      title: ControlPlane
      description: a control plane
      required:
        - id
        - name
        - updated_at
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: ID of the control plane.
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          readOnly: true
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
        created_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
    CreateMeshControlPlaneRequest:
      type: object
      title: CreateMeshControlPlaneRequest
      description: a payload to create a control plane
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
          minLength: 1
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
    UpdateMeshControlPlaneRequest:
      type: object
      title: UpdateMeshControlPlaneRequest
      description: a payload to update the control plane
      properties:
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
    APIProductLabels:
      title: Labels
      type: object
      description: >
        description: A maximum of 5 user-defined labels are allowed on this resource.

        Keys must not start with kong, konnect, insomnia, mesh, kic or _, which are reserved for Kong.

        Keys are case-sensitive.

      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z\-._]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
      default: {}
    APIProduct:
      x-speakeasy-entity: ApiProduct
      title: API Product
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - description
        - portal_ids
        - created_at
        - updated_at
        - labels
        - version_count
      properties:
        id:
          type: string
          format: uuid
          example: b9e81174-b5bb-4638-a3c3-8afe61a0abf8
          description: The API product ID.
          readOnly: true
        name:
          type: string
          description: The name of the API product
          example: My Name
        description:
          type: string
          nullable: true
          description: The description of the API product
          example: MyDescription
        portal_ids:
          type: array
          nullable: false
          uniqueItems: true
          minItems: 0
          description: >-
            The list of portal identifiers which this API product is published to
          items:
            type: string
            format: uuid
            example: 25a2624c-49fc-4764-99e1-224ed819f200
        version_count:
          type: number
          example: 10
          description: The number of product versions attached to this API product
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        labels:
          $ref: '#/components/schemas/APIProductLabels'
    AuthStrategySyncError:
      type: object
      additionalProperties: false
      required:
        - message
      properties:
        plugin_name:
          type: string
        value:
          type: string
          enum:
            - plugin_sync_error_comm
            - plugin_sync_error_unknown
            - plugin_sync_error_fatal
            - plugin_sync_error_updating_plugin_refs
        message:
          type: string
        info:
          type: object
          additionalProperties: true
          properties:
            details:
              type: array
              items:
                type: object
                additionalProperties: true
                properties:
                  type:
                    type: string
                  message:
                    type: array
                    items:
                      type: string
      example:
        plugin_name: konnect-application-auth
        value: plugin_sync_error_comm
        message: Unable to connect to the control plane to update plugin
    AuthStrategySyncErrors:
      readOnly: true
      type: array
      nullable: true
      description: >-
        The set of errors encountered when trying to sync the auth strategies on the version
      items:
        $ref: '#/components/schemas/AuthStrategySyncError'
      example:
        - plugin_name: konnect-application-auth
          value: plugin_sync_error_comm
          message: Unable to connect to the control plane to update plugin
    APIProductVersion:
      x-speakeasy-entity: ApiProductVersion
      title: API Product Version
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - gateway_service
        - publish_status
        - deprecated
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          example: 9f5061ce-78f6-4452-9108-ad7c02821fd5
          description: The API product version identifier.
          readOnly: true
        name:
          type: string
          description: The version of the API product
          example: FirstVersion
        gateway_service:
          type: object
          nullable: true
          additionalProperties: false
          required:
            - id
            - control_plane_id
          properties:
            id:
              type: string
              format: uuid
              nullable: true
              description: >-
                The identifier of a gateway service associated with the version of the API product.
              example: 09b4786a-3e48-4631-8f6b-62d1d8e1a7f3
            runtime_group_id:
              type: string
              format: uuid
              deprecated: true
              description: >-
                This field is deprecated, please use `control_plane_id` instead. The identifier of the control plane that the gateway service resides in
              example: e4d9ebb1-26b4-426a-b00e-cb67044f3baf
            control_plane_id:
              type: string
              format: uuid
              description: >-
                The identifier of the control plane that the gateway service resides in
              example: e4d9ebb1-26b4-426a-b00e-cb67044f3baf
        publish_status:
          type: string
          description: The publish status of the API product version
          enum:
            - unpublished
            - published
          example: unpublished
        deprecated:
          type: boolean
          description: Indicates if this API product version is deprecated
          example: false
        auth_strategy_sync_errors:
          $ref: '#/components/schemas/AuthStrategySyncErrors'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    CreateAPIProductDTO:
      x-speakeasy-entity: ApiProductVersion
      title: Create API Product Request
      description: The request schema to create an API product.
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: API Product
          description: The name of the API product.
        description:
          type: string
          nullable: true
          example: Text describing the API product
          description: The description of the API product.
          default: null
        labels:
          $ref: '#/components/schemas/APIProductLabels'
    UpdateAPIProductDTO:
      x-speakeasy-entity: ApiProductVersion
      title: Update API Product Request
      description: The request schema for updating an API product.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: API Product
          description: The name for the API product.
        description:
          type: string
          nullable: true
          example: Text describing the API product
          description: The description of the API product.
        labels:
          $ref: '#/components/schemas/APIProductLabels'
        portal_ids:
          type: array
          nullable: false
          uniqueItems: true
          minItems: 0
          description: >-
            The list of portal identifiers which this API product should be published to
          items:
            type: string
            format: uuid
            example: 25a2624c-49fc-4764-99e1-224ed819f200
    CreateAPIProductVersionDTO:
      title: Create API Product Version Request
      description: The request schema to create a version of an API product.
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          example: v1
          description: The version name of the API product version.
        publish_status:
          type: string
          nullable: false
          description: The publish status of the API product version.
          enum:
            - unpublished
            - published
          example: unpublished
          default: unpublished
        deprecated:
          type: boolean
          nullable: false
          description: Indicates if the version of the API product is deprecated.
          example: false
          default: false
        gateway_service:
          $ref: '#/components/schemas/GatewayServicePayload'
    UpdateAPIProductVersionDTO:
      title: Update API Product Version Request
      description: The request schema for updating a version of an API product.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 1
          example: v1
          description: The version name of the API product version.
        publish_status:
          type: string
          description: The publish status of the API product version.
          enum:
            - unpublished
            - published
          example: unpublished
        deprecated:
          type: boolean
          description: Indicates if the version of the API product is deprecated.
          example: false
        notify:
          type: boolean
          description: >
            When set to `true`, and all the following conditions are true:

            - version of the API product deprecation has changed from `false` -> `true`

            - version of the API product is published


            then consumers of the now deprecated verion of the API product will be notified.

          example: true
        gateway_service:
          $ref: '#/components/schemas/GatewayServicePayload'
    LegacyGatewayServicePayload:
      type: object
      nullable: true
      additionalProperties: false
      required:
        - id
        - runtime_group_id
      properties:
        id:
          type: string
          format: uuid
          description: >-
            The identifier of a gateway service associated with the version of the API product.
          example: 09b4786a-3e48-4631-8f6b-62d1d8e1a7f3
        runtime_group_id:
          type: string
          format: uuid
          deprecated: true
          description: >-
            The identifier of the control plane that the gateway service resides in
          example: e4d9ebb1-26b4-426a-b00e-cb67044f3baf
    GatewayServicePayload:
      type: object
      nullable: true
      additionalProperties: false
      required:
        - id
        - control_plane_id
      properties:
        id:
          type: string
          format: uuid
          description: >-
            The identifier of a gateway service associated with the version of the API product.
          example: 09b4786a-3e48-4631-8f6b-62d1d8e1a7f3
        control_plane_id:
          type: string
          format: uuid
          description: >-
            The identifier of the control plane that the gateway service resides in
          example: e4d9ebb1-26b4-426a-b00e-cb67044f3baf
    CreatedAt:
      type: string
      format: date-time
      example: '2022-11-04T20:10:06.927Z'
      description: An ISO-8601 timestamp representation of entity creation date.
      readOnly: true
    UpdatedAt:
      type: string
      format: date-time
      example: '2022-11-04T20:10:06.927Z'
      description: An ISO-8601 timestamp representation of entity update date.
      readOnly: true
    UnsupportedMediaTypeError:
      type: object
      properties:
        status:
          example: 415
        title:
          example: UnsupportedMediaType
        type:
          example: https://httpstatuses.com/415
        instance:
          example: kong:trace:1234567890
        detail:
          example: UnsupportedMediaType
      allOf:
        - $ref: '#/components/schemas/BaseError'
    PortalClaimMappings:
      title: PortalClaimMappings
      description: Mappings from a portal developer atribute to an Identity Provider claim.
      type: object
      minProperties: 0
      maxProperties: 3
      properties:
        name:
          type: string
          example: name
          default: name
        email:
          type: string
          example: email
          default: email
        groups:
          type: string
          default: groups
          example: custom-group-claim
      example:
        name: name
        email: email
        groups: custom-group-claim
    PortalOIDCConfig:
      title: PortalOIDCConfig
      description: Configuration properties for an OpenID Connect Identity Provider.
      type: object
      properties:
        issuer:
          type: string
          example: https://identity.example.com/v2
        client_id:
          type: string
          example: x7id0o42lklas0blidl2
        scopes:
          type: array
          default:
            - email
            - openid
            - profile
          items:
            type: string
            default: openid
          example:
            - email
            - openid
            - profile
        claim_mappings:
          $ref: '#/components/schemas/PortalClaimMappings'
      required:
        - issuer
        - client_id
      example:
        issuer: https://identity.example.com/v2
        client_id: x7id0o42lklas0blidl2
        scopes:
          - email
          - openid
          - profile
        claim_mappings:
          name: name
          email: email
          groups: custom-group-claim
    PortalAuthenticationSettingsResponse:
      x-speakeasy-entity: PortalAuth
      title: PortalAuthenticationSettingsResponse
      description: The developer authentication settings for a portal.
      type: object
      properties:
        basic_auth_enabled:
          type: boolean
          example: true
          description: The organization has basic auth enabled.
        oidc_auth_enabled:
          type: boolean
          example: false
          description: The organization has OIDC disabled.
        oidc_team_mapping_enabled:
          type: boolean
          example: true
          description: IdP groups determine the Portal Teams a developer has.
        konnect_mapping_enabled:
          type: boolean
          example: false
          description: A Konnect Identity Admin assigns teams to a developer.
        oidc_config:
          $ref: '#/components/schemas/PortalOIDCConfig'
      required:
        - basic_auth_enabled
        - konnect_mapping_enabled
        - oidc_auth_enabled
        - oidc_team_mapping_enabled
      example:
        basic_auth_enabled: true
        oidc_auth_enabled: true
        oidc_team_mapping_enabled: true
        konnect_mapping_enabled: false
        oidc_config:
          issuer: https://identity.example.com/v2
          client_id: x7id0o42lklas0blidl2
          scopes:
            - email
            - openid
            - profile
          claim_mappings:
            name: name
            email: email
            groups: custom-group-claim
    PortalAuthenticationSettingsUpdateRequest:
      x-speakeasy-entity: PortalAuth
      title: PortalAuthenticationSettingsUpdateRequest
      description: Properties to update a portal's developer auth settings.
      type: object
      properties:
        basic_auth_enabled:
          type: boolean
          example: true
          description: The organization has basic auth enabled.
        oidc_auth_enabled:
          type: boolean
          example: false
          description: The organization has OIDC disabled.
        oidc_team_mapping_enabled:
          type: boolean
          example: true
          description: >-
            Whether IdP groups determine the Konnect Portal teams a developer has.
        konnect_mapping_enabled:
          type: boolean
          example: false
          description: Whether a Konnect Identity Admin assigns teams to a developer.
        oidc_issuer:
          type: string
        oidc_client_id:
          type: string
        oidc_client_secret:
          type: string
        oidc_scopes:
          type: array
          default:
            - email
            - openid
            - profile
          items:
            type: string
            default: openid
        oidc_claim_mappings:
          $ref: '#/components/schemas/PortalClaimMappings'
      example:
        basic_auth_enabled: true
        oidc_auth_enabled: true
        oidc_team_mapping_enabled: true
        konnect_mapping_enabled: false
        oidc_issuer: https://identity.example.com/v2
        oidc_client_id: x7id0o42lklas0blidl2
        oidc_scopes:
          - email
          - openid
          - profile
        oidc_claim_mappings:
          name: name
          email: email
          groups: custom-group-claim
    ListPortalsResponse:
      x-speakeasy-entity: PortalList
      additionalProperties: false
      description: A paginated list of portals in the current region in the organization.
      type: object
      required:
        - data
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/PaginatedMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Portal'
      example:
        meta:
          page:
            number: 1
            size: 10
            total: 1
        data:
          - id: 8f9fd312-a987-4628-b4c5-bb4f4fddd5f7
            created_at: '2022-02-07T17:46:57.52Z'
            updated_at: '2022-10-08T17:00:00.52Z'
            name: Portal A
            default_domain: 123455678abcd.us.portal.konghq.com
            is_public: false
            rbac_enabled: true
            auto_approve_applications: false
            auto_approve_developers: true
            custom_domain: api.example.com
            custom_client_domain: portal.example.com
    UpdatePortalResponse:
      $ref: '#/components/schemas/Portal'
    Portal:
      x-speakeasy-entity: Portal
      additionalProperties: false
      type: object
      required:
        - id
        - created_at
        - updated_at
        - name
        - default_domain
        - is_public
        - rbac_enabled
        - auto_approve_applications
        - auto_approve_developers
        - custom_domain
        - custom_client_domain
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        name:
          description: The name of the portal, used to distinguish it from other portals.
          type: string
          maxLength: 255
          minLength: 1
        default_domain:
          description: >-
            The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a `custom_domain``.
          type: string
          format: hostname
          readOnly: true
        is_public:
          description: >-
            Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
          type: boolean
        rbac_enabled:
          description: >-
            Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register for products until unless assigned to teams with access to view and consume specific products.
          type: boolean
        auto_approve_applications:
          description: >-
            Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
          type: boolean
        auto_approve_developers:
          type: boolean
          description: >-
            Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        custom_domain:
          nullable: true
          type: string
          format: hostname
          description: >-
            The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        custom_client_domain:
          description: >-
            The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal client will no longer be available. `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
          nullable: true
          type: string
          format: hostname
        default_application_auth_strategy_id:
          $ref: '#/components/schemas/DefaultApplicationAuthStratID'
      example:
        id: 9f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        created_at: '2022-02-07T17:46:57.52Z'
        updated_at: '2022-10-08T17:00:00.52Z'
        name: Portal A
        default_domain: 123455678abcd.us.portal.konghq.com
        is_public: false
        rbac_enabled: true
        auto_approve_applications: false
        auto_approve_developers: true
        custom_domain: api.example.com
        custom_client_domain: portal.example.com
    DefaultApplicationAuthStratID:
      description: Default strategy ID applied on applications for the portal
      nullable: true
      type: string
      format: uuid
      example: 5f9fd312-a987-4628-b4c5-bb4f4fddd5f7
    UpdatePortalRequest:
      additionalProperties: false
      type: object
      properties:
        is_public:
          description: >-
            Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
          type: boolean
        rbac_enabled:
          description: >-
            Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register for products until unless assigned to teams with access to view and consume specific products.
          type: boolean
        auto_approve_applications:
          description: >-
            Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
          type: boolean
        auto_approve_developers:
          description: >-
            Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
          type: boolean
        custom_domain:
          description: >-
            The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
          type: string
          format: hostname
          nullable: true
          maxLength: 1024
        custom_client_domain:
          description: >-
            The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
          type: string
          format: hostname
          nullable: true
          maxLength: 1024
        default_application_auth_strategy_id:
          $ref: '#/components/schemas/DefaultApplicationAuthStratID'
      example:
        is_public: false
        rbac_enabled: true
        auto_approve_applications: false
        auto_approve_developers: false
        custom_domain: api.example.com
        custom_client_domain: portal.example.com
        default_application_auth_strategy_id: 5f9fd312-a987-4628-b4c5-bb4f4fddd5f7
    UUID:
      type: string
      format: uuid
      example: 5f9fd312-a987-4628-b4c5-bb4f4fddd5f7
      description: Contains a unique identifier used for this resource.
      readOnly: true
    BasicAuthPluginConfig:
      properties:
        config:
          type: object
          properties:
            anonymous:
              type: string
              description: >-
                An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Please note that this value must refer to the Consumer `id` or `username` attribute, and **not** its `custom_id`.
            hide_credentials:
              default: false
              type: boolean
              description: >-
                An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the `Authorization` header) before proxying it.
        name:
          type: string
          const: basic-auth
      required: []
    BasicAuthPlugin:
      x-speakeasy-entity: PluginBasicAuth
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/BasicAuthPluginConfig'
    CreateBasicAuthPlugin:
      x-speakeasy-entity: PluginBasicAuth
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/BasicAuthPluginConfig'
    RateLimitingPluginConfig:
      properties:
        config:
          type: object
          properties:
            second:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per second.
            minute:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per minute.
            hour:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per hour.
            day:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per day.
            month:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per month.
            year:
              minimum: 0
              type: number
              description: The number of HTTP requests that can be made per year.
            limit_by:
              default: consumer
              enum:
                - consumer
                - credential
                - ip
                - service
                - header
                - path
                - consumer-group
              type: string
              description: The entity that is used when aggregating the limits.
            header_name:
              type: string
              description: A string representing an HTTP header name.
            path:
              starts_with: /
              match_none:
                pattern: //
                err: must not have empty segments
              type: string
              description: >-
                A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
            policy:
              type: string
              minLength: 0
              enum:
                - local
                - cluster
                - redis
              default: local
              description: >-
                The rate-limiting policies to use for retrieving and incrementing the limits.
            fault_tolerant:
              type: boolean
              default: true
              description: >-
                A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
            redis_host:
              type: string
              description: A string representing a host name, such as example.com.
            redis_port:
              minimum: 0
              maximum: 65535
              default: 6379
              type: integer
              description: >-
                An integer representing a port number between 0 and 65535, inclusive.
            redis_password:
              minLength: 0
              referenceable: true
              type: string
              description: >-
                When using the `redis` policy, this property specifies the password to connect to the Redis server.
            redis_username:
              referenceable: true
              type: string
              description: >-
                When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired.
            redis_ssl:
              type: boolean
              default: false
              description: >-
                When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server.
            redis_ssl_verify:
              type: boolean
              default: false
              description: >-
                When using the `redis` policy with `redis_ssl` set to `true`, this property specifies it server SSL certificate is validated. Note that you need to configure the lua_ssl_trusted_certificate to specify the CA (or server) certificate used by your Redis server. You may also need to configure lua_ssl_verify_depth accordingly.
            redis_server_name:
              type: string
              description: >-
                A string representing an SNI (server name indication) value for TLS.
            redis_timeout:
              default: 2000
              type: number
              description: >-
                When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server.
            redis_database:
              default: 0
              type: integer
              description: >-
                When using the `redis` policy, this property specifies the Redis database to use.
            hide_client_headers:
              type: boolean
              default: false
              description: Optionally hide informative response headers.
            error_code:
              default: 429
              minimum: 0
              type: number
              description: >-
                Set a custom error code to return when the rate limit is exceeded.
            error_message:
              default: API rate limit exceeded
              type: string
              description: >-
                Set a custom error message to return when the rate limit is exceeded.
            sync_rate:
              type: number
              default: -1
              description: >-
                How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
        name:
          type: string
          const: rate-limiting
      required: []
    RateLimitingPlugin:
      x-speakeasy-entity: PluginRateLimiting
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/RateLimitingPluginConfig'
    CreateRateLimitingPlugin:
      x-speakeasy-entity: PluginRateLimiting
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/RateLimitingPluginConfig'
    AIProxyPluginConfig:
      properties:
        config:
          type: object
          properties:
            route_type:
              type: string
              enum:
                - llm/v1/chat
                - llm/v1/completions
              description: The model's operation implementation, for this provider.
            auth:
              type: object
              required: false
              properties:
                header_name:
                  type: string
                  referenceable: true
                  required: false
                  description: >-
                    If AI model requires authentication via Authorization or API key header, specify its name here.
                header_value:
                  type: string
                  encrypted: true
                  referenceable: true
                  required: false
                  description: >-
                    Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
                param_name:
                  type: string
                  referenceable: true
                  required: false
                  description: >-
                    If AI model requires authentication via query parameter, specify its name here.
                param_value:
                  type: string
                  encrypted: true
                  referenceable: true
                  required: false
                  description: Specify the full parameter value for 'param_name'.
                param_location:
                  type: string
                  enum:
                    - query
                    - body
                  required: false
                  description: >-
                    Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
            model:
              type: object
              properties:
                provider:
                  type: string
                  enum:
                    - openai
                    - azure
                    - anthropic
                    - cohere
                    - mistral
                    - llama2
                  description: >-
                    AI provider request format - Kong translates requests to and from the specified backend compatible formats.
                name:
                  type: string
                  required: false
                  description: Model name to execute.
                options:
                  description: Key/value settings for the model
                  type: object
                  required: false
                  properties:
                    max_tokens:
                      type: integer
                      default: 256
                      description: >-
                        Defines the max_tokens, if using chat or completion models.
                    temperature:
                      minimum: 0
                      maximum: 5
                      type: number
                      default: 1
                      description: >-
                        Defines the matching temperature, if using chat or completion models.
                    top_p:
                      minimum: 0
                      maximum: 1
                      type: number
                      default: 1
                      description: Defines the top-p probability mass, if supported.
                    top_k:
                      minimum: 0
                      maximum: 500
                      type: integer
                      default: 0
                      description: Defines the top-k most likely tokens, if supported.
                    anthropic_version:
                      type: string
                      required: false
                      description: >-
                        Defines the schema/API version, if using Anthropic provider.
                    azure_instance:
                      type: string
                      required: false
                      description: Instance name for Azure OpenAI hosted models.
                    azure_api_version:
                      type: string
                      default: '2023-05-15'
                      description: '''api-version'' for Azure OpenAI instances.'
                    azure_deployment_id:
                      type: string
                      required: false
                      description: Deployment ID for Azure OpenAI instances.
                    llama2_format:
                      type: string
                      enum:
                        - raw
                        - openai
                        - ollama
                      required: false
                      description: >-
                        If using llama2 provider, select the upstream message format.
                    mistral_format:
                      type: string
                      enum:
                        - openai
                        - ollama
                      required: false
                      description: >-
                        If using mistral provider, select the upstream message format.
                    upstream_url:
                      required: false
                      type: string
                      description: >-
                        Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
              required: []
            logging:
              type: object
              properties:
                log_statistics:
                  type: boolean
                  default: true
                  description: >-
                    If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
                log_payloads:
                  type: boolean
                  default: false
                  description: >-
                    If enabled, will log the request and response body into the Kong log plugin(s) output.
          required:
            - model
        name:
          type: string
          const: ai-proxy
      required:
        - config
    AIProxyPlugin:
      x-speakeasy-entity: PluginAIProxy
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/AIProxyPluginConfig'
    CreateAIProxyPlugin:
      x-speakeasy-entity: PluginAIProxy
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/AIProxyPluginConfig'
    KeyAuthPluginConfig:
      properties:
        config:
          type: object
          properties:
            key_names:
              type: array
              default:
                - apikey
              items:
                type: string
                description: A string representing an HTTP header name.
              description: >-
                Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
            hide_credentials:
              type: boolean
              default: false
              description: >-
                An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.
            anonymous:
              type: string
              description: >-
                An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.
            key_in_header:
              type: boolean
              default: true
              description: >-
                If enabled (default), the plugin reads the request header and tries to find the key in it.
            key_in_query:
              type: boolean
              default: true
              description: >-
                If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
            key_in_body:
              type: boolean
              default: false
              description: >-
                If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
            run_on_preflight:
              type: boolean
              default: true
              description: >-
                A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
        name:
          type: string
          const: key-auth
      required: []
    KeyAuthPlugin:
      x-speakeasy-entity: PluginKeyAuth
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/KeyAuthPluginConfig'
    CreateKeyAuthPlugin:
      x-speakeasy-entity: PluginKeyAuth
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/KeyAuthPluginConfig'
    RequestTransformerPluginConfig:
      properties:
        config:
          properties:
            http_method:
              type: string
              pattern: ^%u+$
              description: >-
                A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
            remove:
              properties:
                body:
                  default: []
                  type: array
                  items:
                    type: string
                headers:
                  default: []
                  type: array
                  items:
                    type: string
                querystring:
                  default: []
                  type: array
                  items:
                    type: string
              type: object
            rename:
              properties:
                body:
                  default: []
                  type: array
                  items:
                    type: string
                headers:
                  default: []
                  type: array
                  items:
                    type: string
                    pattern: ^[^:]+:.*$
                querystring:
                  default: []
                  type: array
                  items:
                    type: string
              type: object
            replace:
              properties:
                body:
                  default: []
                  type: array
                  items:
                    type: string
                headers:
                  default: []
                  type: array
                  items:
                    type: string
                    pattern: ^[^:]+:.*$
                querystring:
                  default: []
                  type: array
                  items:
                    type: string
                uri:
                  type: string
              type: object
            add:
              properties:
                body:
                  default: []
                  type: array
                  items:
                    type: string
                headers:
                  default: []
                  type: array
                  items:
                    type: string
                    pattern: ^[^:]+:.*$
                querystring:
                  default: []
                  type: array
                  items:
                    type: string
              type: object
            append:
              properties:
                body:
                  default: []
                  type: array
                  items:
                    type: string
                headers:
                  default: []
                  type: array
                  items:
                    type: string
                    pattern: ^[^:]+:.*$
                querystring:
                  default: []
                  type: array
                  items:
                    type: string
              type: object
          type: object
          required: []
        name:
          type: string
          const: request-transformer
      required:
        - config
    RequestTransformerPlugin:
      x-speakeasy-entity: PluginRequestTransformer
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/RequestTransformerPluginConfig'
    CreateRequestTransformerPlugin:
      x-speakeasy-entity: PluginRequestTransformer
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/RequestTransformerPluginConfig'
    CORSPluginConfig:
      properties:
        config:
          type: object
          properties:
            origins:
              type: array
              items:
                type: string
              description: >-
                List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
            headers:
              type: array
              items:
                type: string
              description: Value for the `Access-Control-Allow-Headers` header.
            exposed_headers:
              type: array
              items:
                type: string
              description: >-
                Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
            methods:
              default:
                - GET
                - HEAD
                - PUT
                - PATCH
                - POST
                - DELETE
                - OPTIONS
                - TRACE
                - CONNECT
              type: array
              items:
                type: string
                enum:
                  - GET
                  - HEAD
                  - PUT
                  - PATCH
                  - POST
                  - DELETE
                  - OPTIONS
                  - TRACE
                  - CONNECT
              description: >-
                'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
            max_age:
              type: number
              description: >-
                Indicates how long the results of the preflight request can be cached, in `seconds`.
            credentials:
              type: boolean
              default: false
              description: >-
                Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
            private_network:
              type: boolean
              default: false
              description: >-
                Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
            preflight_continue:
              type: boolean
              default: false
              description: >-
                A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
        name:
          type: string
          const: cors
      required: []
    CORSPlugin:
      x-speakeasy-entity: PluginCORS
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/CORSPluginConfig'
    CreateCORSPlugin:
      x-speakeasy-entity: PluginCORS
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/CORSPluginConfig'
    ACLPluginConfig:
      properties:
        config:
          type: object
          properties:
            allow:
              type: array
              description: >-
                Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
              items:
                type: string
            deny:
              type: array
              description: >-
                Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
              items:
                type: string
            hide_groups_header:
              default: false
              type: boolean
              description: >-
                If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
            include_consumer_groups:
              type: boolean
              default: false
        name:
          type: string
          const: acl
      required: []
    ACLPlugin:
      x-speakeasy-entity: PluginACL
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/ACLPluginConfig'
    CreateACLPlugin:
      x-speakeasy-entity: PluginACL
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/ACLPluginConfig'
    ExitTransformerPluginConfig:
      properties:
        config:
          type: object
          properties:
            functions:
              type: array
              items:
                type: string
            handle_unknown:
              type: boolean
              default: false
              description: >-
                Determines whether to handle unknown status codes by transforming their responses.
            handle_unexpected:
              type: boolean
              default: false
              description: >-
                Determines whether to handle unexpected errors by transforming their responses.
          required: []
        name:
          type: string
          const: exit-transformer
      required:
        - config
    ExitTransformerPlugin:
      x-speakeasy-entity: PluginExitTransformer
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/ExitTransformerPluginConfig'
    CreateExitTransformerPlugin:
      x-speakeasy-entity: PluginExitTransformer
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/ExitTransformerPluginConfig'
    PrometheusPluginConfig:
      properties:
        config:
          type: object
          properties:
            per_consumer:
              default: false
              type: boolean
              description: >-
                A boolean value that determines if per-consumer metrics should be collected. If enabled, the `kong_http_requests_total` and `kong_bandwidth_bytes` metrics fill in the consumer label when available.
            status_code_metrics:
              default: false
              type: boolean
              description: >-
                A boolean value that determines if status code metrics should be collected. If enabled, `http_requests_total`, `stream_sessions_total` metrics will be exported.
            latency_metrics:
              default: false
              type: boolean
              description: >-
                A boolean value that determines if status code metrics should be collected. If enabled, `kong_latency_ms`, `upstream_latency_ms` and `request_latency_ms` metrics will be exported.
            bandwidth_metrics:
              default: false
              type: boolean
              description: >-
                A boolean value that determines if status code metrics should be collected. If enabled, `bandwidth_bytes` and `stream_sessions_total` metrics will be exported.
            upstream_health_metrics:
              default: false
              type: boolean
              description: >-
                A boolean value that determines if status code metrics should be collected. If enabled, `upstream_target_health` metric will be exported.
        name:
          type: string
          const: prometheus
      required: []
    PrometheusPlugin:
      x-speakeasy-entity: PluginPrometheus
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/PrometheusPluginConfig'
    CreatePrometheusPlugin:
      x-speakeasy-entity: PluginPrometheus
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/PrometheusPluginConfig'
    ApplicationRegistrationPluginConfig:
      properties:
        config:
          type: object
          properties:
            display_name:
              unique: true
              type: string
              description: Unique display name used for a Service in the Developer Portal.
            description:
              unique: true
              type: string
              description: >-
                Unique description displayed in information about a Service in the Developer Portal.
            auto_approve:
              type: boolean
              default: false
              description: >-
                If enabled, all new Service Contracts requests are automatically approved.
            show_issuer:
              type: boolean
              default: false
              description: Displays the **Issuer URL** in the **Service Details** dialog.
          required: []
        name:
          type: string
          const: application-registration
      required:
        - config
    ApplicationRegistrationPlugin:
      x-speakeasy-entity: PluginApplicationRegistration
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - $ref: '#/components/schemas/ApplicationRegistrationPluginConfig'
    CreateApplicationRegistrationPlugin:
      x-speakeasy-entity: PluginApplicationRegistration
      allOf:
        - $ref: '#/components/schemas/CreatePlugin'
        - $ref: '#/components/schemas/ApplicationRegistrationPluginConfig'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The personal access token is meant to be used as an alternative to basic-auth when accessing Konnect via APIs.

        You can generate a Personal Access Token (PAT) from the [personal access token page](https://cloud.konghq.com/global/tokens/) in the Konnect dashboard.

        The PAT token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header 'Authorization: Bearer kpat_xgfT...'`

    systemAccountAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The system account access token is meant for automations and integrations that are not directly associated with a human identity.

        You can generate a system account Access Token by creating a system account and then obtaining a system account access token for that account.

        The access token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header 'Authorization: Bearer spat_i2Ej...'`

    konnectAccessToken:
      description: >-
        The Konnect access token is meant to be used by the Konnect dashboard and the decK CLI to authenticate with.
      scheme: bearer
      type: http
  requestBodies:
    CreateAPIProductRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAPIProductDTO'
    UpdateAPIProductRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateAPIProductDTO'
    CreateAPIProductVersionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAPIProductVersionDTO'
    UpdateAPIProductVersionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateAPIProductVersionDTO'
    UpdatePortalAuthenticationSettings:
      description: Update a portal's developer authentication settings.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalAuthenticationSettingsUpdateRequest'
    UpdatePortal:
      description: Update a portal's settings.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePortalRequest'
security:
  - personalAccessToken: []
  - systemAccountAccessToken: []
  - konnectAccessToken: []
tags:
  - name: Control Planes
  - name: Control Plane Groups
  - description: >
      Service entities are abstractions of your microservice interfaces or formal APIs. For example, a service could be a data transformation microservice or a billing API.

      <br><br>

      The main attribute of a service is the destination URL for proxying traffic. This URL can be set as a single string or by specifying its protocol, host, port and path individually.

      <br><br>

      Services are associated to routes, and a single service can have many routes associated with it. Routes are entrypoints in Kong Gateway which define rules to match client requests. Once a route is matched, Kong Gateway proxies the request to its associated service. See the [Proxy Reference](https://docs.konghq.com/gateway/latest/how-kong-works/routing-traffic/) for a detailed explanation of how Kong proxies traffic.

      <br><br>

      Services can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).

    name: Services
  - description: >
      Route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to the associated service. You need at least one matching rule that applies to the protocol being matched by the route.

      <br><br>

      The combination of routes and services, and the separation of concerns between them, offers a powerful routing mechanism with which it is possible to define fine-grained entrypoints in Kong Gateway leading to different upstream services of your infrastructure.

      <br><br>

      Depending on the protocol, one of the following attributes must be set:

      <br>


      - `http`: At least one of `methods`, `hosts`, `headers`, or `paths`

      - `https`: At least one of `methods`, `hosts`, `headers`, `paths`, or `snis`

      - `tcp`: At least one of `sources` or `destinations`

      - `tls`: at least one of `sources`, `destinations`, or `snis`

      - `tls_passthrough`: set `snis`

      - `grpc`: At least one of `hosts`, `headers`, or `paths`

      - `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`

      - `ws`: At least one of `hosts`, `headers`, or `paths`

      - `wss`: At least one of `hosts`, `headers`, `paths`, or `snis`








        <br>
        A route can't have both `tls` and `tls_passthrough` protocols at same time.
        <br><br>
        Learn more about the router:
      - [Configure routes using expressions](https://docs.konghq.com/gateway/latest/key-concepts/routes/expressions)

      - [Router Expressions language reference](https://docs.konghq.com/gateway/latest/reference/router-expressions-language/)

    name: Routes
  - description: >
      A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.

      You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://docs.konghq.com/hub/).

      <br><br>

      When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.

      <br><br>

      Plugins can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).

    name: Plugins
  - description: >
      The consumer object represents a consumer - or a user - of a service.

      You can either rely on Kong Gateway as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong Gateway and your existing primary datastore.

    name: Consumers
  - description: "Consumer groups enable the organization and categorization of consumers (users or applications) within an API ecosystem. \nBy grouping consumers together, you eliminate the need to manage them individually, providing a scalable, efficient approach to managing configurations."
    name: Consumer Groups
  - description: >
      A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong Gateway to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service.

      <br><br>

      Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.

      <br><br>

      If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string.

    name: Certificates
  - description: "An SNI object represents a many-to-one mapping of hostnames to a certificate. \n<br><br>\nA certificate object can have many hostnames associated with it. When Kong Gateway receives an SSL request, it uses the SNI field in the Client Hello to look up the certificate object based on the SNI associated with the certificate."
    name: SNIs
  - description: "A CA certificate object represents a trusted certificate authority. \nThese objects are used by Kong Gateway to verify the validity of a client or server certificate."
    name: CA Certificates
  - description: "The upstream object represents a virtual hostname and can be used to load balance incoming requests over multiple services (targets). \n<br><br>\nAn upstream also includes a [health checker](https://docs.konghq.com/gateway/latest/how-kong-works/health-checks/), which can enable and disable targets based on their ability or inability to serve requests. \nThe configuration for the health checker is stored in the upstream object, and applies to all of its targets."
    name: Upstreams
  - description: >
      Vault objects are used to configure different vault connectors for [managing secrets](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/).

      Configuring a vault lets you reference secrets from other entities.

      This allows for a proper separation of secrets and configuration and prevents secret sprawl.

      <br><br>

      For example, you could store a certificate and a key in a vault, then reference them from a certificate entity. This way, the certificate and key are not stored in the entity directly and are more secure.

      <br><br>

      Secrets rotation can be managed using [TTLs](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/).

    name: Vaults
  - description: >
      A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.

    name: Keys
  - description: >
      A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.

    name: KeySets
  - name: API-keys
  - name: Basic-auth credentials
  - name: JWTs
  - name: HMAC-auth credentials
  - name: ACLs
  - name: Mesh
  - name: API Products
  - name: API Product Documentation
  - name: API Product Versions
  - name: API Product Version Specification
  - name: Portals
    description: APIs related to Configuration of Konnect Developer Portals.
  - name: Portal Developers
    description: APIs related to Konnect Developer Portal Developers.
  - name: Portal Teams
    description: APIs related to Konnect Developer Portal Developer Teams.
  - name: Portal Team Membership
    description: >-
      APIs related to Developer Membership in Konnect Developer Portal Developer Teams.
  - name: Portal Team Roles
    description: APIs related to Team Roles in Konnect Developer Portal.
  - name: Portal Applications
    description: APIs related to Konnect Developer Portal Applications.
  - name: Portal Application Registrations
    description: APIs related to Konnect Developer Portal Application Registrations.
  - name: Portal Products
    description: APIs related to API Products Published to Konnect Developer Portals.
  - name: Portal Auth Settings
    description: APIs related to Konnect Developer Portal Authentication Settings.
  - name: Portal Appearance
    description: APIs related to Konnect Developer Portal Appearance Settings.
  - name: Portal Product Versions
    description: "Portal Product Versions hold metadata that describes how a Product Version is configured for a specific portal.\n  \n  They contain:\n  - Lifecyle and deprecation statuses\n  - Application registration settings like auto approve or whether application registration is enabled\n  - The authentication strategy that is enabled for Application Registration\n"
