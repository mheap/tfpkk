// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"konnect/internal/sdk/pkg/models/shared"
)

func (r *RuntimeGroupResourceModel) ToCreateSDKType() *shared.CreateRuntimeGroupRequest {
	authType := new(shared.CreateRuntimeGroupRequestAuthType)
	if !r.AuthType.IsUnknown() && !r.AuthType.IsNull() {
		*authType = shared.CreateRuntimeGroupRequestAuthType(r.AuthType.ValueString())
	} else {
		authType = nil
	}
	clusterType := new(shared.CreateRuntimeGroupRequestClusterType)
	if !r.ClusterType.IsUnknown() && !r.ClusterType.IsNull() {
		*clusterType = shared.CreateRuntimeGroupRequestClusterType(r.ClusterType.ValueString())
	} else {
		clusterType = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var labels interface{}
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		_ = json.Unmarshal([]byte(r.Labels.ValueString()), &labels)
	}
	name := r.Name.ValueString()
	out := shared.CreateRuntimeGroupRequest{
		AuthType:    authType,
		ClusterType: clusterType,
		Description: description,
		Labels:      labels,
		Name:        name,
	}
	return &out
}

func (r *RuntimeGroupResourceModel) ToGetSDKType() *shared.CreateRuntimeGroupRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *RuntimeGroupResourceModel) ToUpdateSDKType() *shared.UpdateRuntimeGroupRequest {
	authType := new(shared.UpdateRuntimeGroupRequestAuthType)
	if !r.AuthType.IsUnknown() && !r.AuthType.IsNull() {
		*authType = shared.UpdateRuntimeGroupRequestAuthType(r.AuthType.ValueString())
	} else {
		authType = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var labels interface{}
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		_ = json.Unmarshal([]byte(r.Labels.ValueString()), &labels)
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.UpdateRuntimeGroupRequest{
		AuthType:    authType,
		Description: description,
		Labels:      labels,
		Name:        name,
	}
	return &out
}

func (r *RuntimeGroupResourceModel) ToDeleteSDKType() *shared.CreateRuntimeGroupRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *RuntimeGroupResourceModel) RefreshFromGetResponse(resp *shared.RuntimeGroup) {
	if r.Config == nil {
		r.Config = &RuntimeGroupConfig{}
	}
	if resp.Config == nil {
		r.Config = nil
	} else {
		r.Config = &RuntimeGroupConfig{}
		if resp.Config.ControlPlaneEndpoint != nil {
			r.Config.ControlPlaneEndpoint = types.StringValue(*resp.Config.ControlPlaneEndpoint)
		} else {
			r.Config.ControlPlaneEndpoint = types.StringNull()
		}
		if resp.Config.TelemetryEndpoint != nil {
			r.Config.TelemetryEndpoint = types.StringValue(*resp.Config.TelemetryEndpoint)
		} else {
			r.Config.TelemetryEndpoint = types.StringNull()
		}
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.Labels == nil {
		r.Labels = types.StringNull()
	} else {
		labelsResult, _ := json.Marshal(resp.Labels)
		r.Labels = types.StringValue(string(labelsResult))
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
}

func (r *RuntimeGroupResourceModel) RefreshFromCreateResponse(resp *shared.RuntimeGroup) {
	r.RefreshFromGetResponse(resp)
}

func (r *RuntimeGroupResourceModel) RefreshFromUpdateResponse(resp *shared.RuntimeGroup) {
	r.RefreshFromGetResponse(resp)
}
