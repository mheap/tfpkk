// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
)

func (r *JwtResourceModel) ToSharedCreateJWT() *shared.CreateJWT {
	algorithm := new(shared.Algorithm)
	if !r.Algorithm.IsUnknown() && !r.Algorithm.IsNull() {
		*algorithm = shared.Algorithm(r.Algorithm.ValueString())
	} else {
		algorithm = nil
	}
	var consumer *shared.CreateJWTConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateJWTConsumer{
			ID: id,
		}
	}
	key := new(string)
	if !r.Key.IsUnknown() && !r.Key.IsNull() {
		*key = r.Key.ValueString()
	} else {
		key = nil
	}
	rsaPublicKey := new(string)
	if !r.RsaPublicKey.IsUnknown() && !r.RsaPublicKey.IsNull() {
		*rsaPublicKey = r.RsaPublicKey.ValueString()
	} else {
		rsaPublicKey = nil
	}
	secret := new(string)
	if !r.Secret.IsUnknown() && !r.Secret.IsNull() {
		*secret = r.Secret.ValueString()
	} else {
		secret = nil
	}
	var tags []string = nil
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.CreateJWT{
		Algorithm:    algorithm,
		Consumer:     consumer,
		Key:          key,
		RsaPublicKey: rsaPublicKey,
		Secret:       secret,
		Tags:         tags,
	}
	return &out
}

func (r *JwtResourceModel) RefreshFromSharedJwt(resp *shared.Jwt) {
	if resp.Algorithm != nil {
		r.Algorithm = types.StringValue(string(*resp.Algorithm))
	} else {
		r.Algorithm = types.StringNull()
	}
	if resp.Consumer == nil {
		r.Consumer = nil
	} else {
		r.Consumer = &CreateACLConsumer{}
		r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
	}
	r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
	r.ID = types.StringPointerValue(resp.ID)
	r.Key = types.StringPointerValue(resp.Key)
	r.RsaPublicKey = types.StringPointerValue(resp.RsaPublicKey)
	r.Secret = types.StringPointerValue(resp.Secret)
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
}
