// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"konnect/internal/sdk"
	"konnect/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_objectplanmodifier "konnect/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "konnect/internal/planmodifiers/stringplanmodifier"
	"konnect/internal/sdk/pkg/models/operations"
	"konnect/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RuntimeGroupResource{}
var _ resource.ResourceWithImportState = &RuntimeGroupResource{}

func NewRuntimeGroupResource() resource.Resource {
	return &RuntimeGroupResource{}
}

// RuntimeGroupResource defines the resource implementation.
type RuntimeGroupResource struct {
	client *sdk.Konnect
}

// RuntimeGroupResourceModel describes the resource data model.
type RuntimeGroupResourceModel struct {
	ClusterType types.String        `tfsdk:"cluster_type"`
	Config      *RuntimeGroupConfig `tfsdk:"config"`
	Description types.String        `tfsdk:"description"`
	ID          types.String        `tfsdk:"id"`
	Labels      types.String        `tfsdk:"labels"`
	Name        types.String        `tfsdk:"name"`
}

func (r *RuntimeGroupResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_runtime_group"
}

func (r *RuntimeGroupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RuntimeGroup Resource",

		Attributes: map[string]schema.Attribute{
			"cluster_type": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"CLUSTER_TYPE_HYBRID",
						"CLUSTER_TYPE_K8S_INGRESS_CONTROLLER",
						"CLUSTER_TYPE_COMPOSITE",
					),
				},
				MarkdownDescription: `must be one of ["CLUSTER_TYPE_HYBRID", "CLUSTER_TYPE_K8S_INGRESS_CONTROLLER", "CLUSTER_TYPE_COMPOSITE"]` + "\n" +
					`The ClusterType value of the cluster associated with the Runtime Group.`,
			},
			"config": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(),
				},
				Attributes: map[string]schema.Attribute{
					"control_plane_endpoint": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(),
						},
						Description: `Control Plane Endpoint.`,
					},
					"telemetry_endpoint": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(),
						},
						Description: `Telemetry Endpoint.`,
					},
				},
				Description: `CP configuration object for related access endpoints.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The description of the runtime group in Konnect.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
				Description: `The runtime group ID.`,
			},
			"labels": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
				MarkdownDescription: `Parsed as JSON.` + "\n" +
					`Labels to facilitate tagged search on runtime groups. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'.`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the runtime group.`,
			},
		},
	}
}

func (r *RuntimeGroupResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RuntimeGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RuntimeGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	clusterType := new(shared.CreateRuntimeGroupRequestClusterType)
	if !data.ClusterType.IsUnknown() && !data.ClusterType.IsNull() {
		*clusterType = shared.CreateRuntimeGroupRequestClusterType(data.ClusterType.ValueString())
	} else {
		clusterType = nil
	}
	description := new(string)
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		*description = data.Description.ValueString()
	} else {
		description = nil
	}
	var labels interface{}
	if !data.Labels.IsUnknown() && !data.Labels.IsNull() {
		_ = json.Unmarshal([]byte(data.Labels.ValueString()), &labels)
	}
	name := data.Name.ValueString()
	request := shared.CreateRuntimeGroupRequest{
		ClusterType: clusterType,
		Description: description,
		Labels:      labels,
		Name:        name,
	}
	res, err := r.client.RuntimeGroups.CreateRuntimeGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RuntimeGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.RuntimeGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RuntimeGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RuntimeGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetRuntimeGroupRequest{
		ID: id,
	}
	res, err := r.client.RuntimeGroups.GetRuntimeGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RuntimeGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.RuntimeGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RuntimeGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RuntimeGroupResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	description := new(string)
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		*description = data.Description.ValueString()
	} else {
		description = nil
	}
	var labels interface{}
	if !data.Labels.IsUnknown() && !data.Labels.IsNull() {
		_ = json.Unmarshal([]byte(data.Labels.ValueString()), &labels)
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	updateRuntimeGroupRequest := shared.UpdateRuntimeGroupRequest{
		Description: description,
		Labels:      labels,
		Name:        name,
	}
	id := data.ID.ValueString()
	request := operations.UpdateRuntimeGroupRequest{
		UpdateRuntimeGroupRequest: updateRuntimeGroupRequest,
		ID:                        id,
	}
	res, err := r.client.RuntimeGroups.UpdateRuntimeGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RuntimeGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.RuntimeGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RuntimeGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RuntimeGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.DeleteRuntimeGroupRequest{
		ID: id,
	}
	res, err := r.client.RuntimeGroups.DeleteRuntimeGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RuntimeGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
