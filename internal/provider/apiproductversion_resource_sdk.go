// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
	"time"
)

func (r *APIProductVersionResourceModel) ToSharedCreateAPIProductVersionDTO() *shared.CreateAPIProductVersionDTO {
	deprecated := new(bool)
	if !r.Deprecated.IsUnknown() && !r.Deprecated.IsNull() {
		*deprecated = r.Deprecated.ValueBool()
	} else {
		deprecated = nil
	}
	var gatewayService *shared.GatewayServicePayload
	if r.GatewayService != nil {
		controlPlaneID := r.GatewayService.ControlPlaneID.ValueString()
		id := r.GatewayService.ID.ValueString()
		gatewayService = &shared.GatewayServicePayload{
			ControlPlaneID: controlPlaneID,
			ID:             id,
		}
	}
	name := r.Name.ValueString()
	publishStatus := new(shared.CreateAPIProductVersionDTOPublishStatus)
	if !r.PublishStatus.IsUnknown() && !r.PublishStatus.IsNull() {
		*publishStatus = shared.CreateAPIProductVersionDTOPublishStatus(r.PublishStatus.ValueString())
	} else {
		publishStatus = nil
	}
	out := shared.CreateAPIProductVersionDTO{
		Deprecated:     deprecated,
		GatewayService: gatewayService,
		Name:           name,
		PublishStatus:  publishStatus,
	}
	return &out
}

func (r *APIProductVersionResourceModel) RefreshFromSharedAPIProductVersion(resp *shared.APIProductVersion) {
	if len(r.AuthStrategySyncErrors) > len(resp.AuthStrategySyncErrors) {
		r.AuthStrategySyncErrors = r.AuthStrategySyncErrors[:len(resp.AuthStrategySyncErrors)]
	}
	for authStrategySyncErrorsCount, authStrategySyncErrorsItem := range resp.AuthStrategySyncErrors {
		var authStrategySyncErrors1 AuthStrategySyncError
		if authStrategySyncErrorsItem.Info == nil {
			authStrategySyncErrors1.Info = nil
		} else {
			authStrategySyncErrors1.Info = &Info{}
			if authStrategySyncErrorsItem.Info.AdditionalProperties == nil {
				authStrategySyncErrors1.Info.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(authStrategySyncErrorsItem.Info.AdditionalProperties)
				authStrategySyncErrors1.Info.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
			for detailsCount, detailsItem := range authStrategySyncErrorsItem.Info.Details {
				var details1 Details
				if detailsItem.AdditionalProperties == nil {
					details1.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(detailsItem.AdditionalProperties)
					details1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				details1.Message = nil
				for _, v := range detailsItem.Message {
					details1.Message = append(details1.Message, types.StringValue(v))
				}
				details1.Type = types.StringPointerValue(detailsItem.Type)
				if detailsCount+1 > len(authStrategySyncErrors1.Info.Details) {
					authStrategySyncErrors1.Info.Details = append(authStrategySyncErrors1.Info.Details, details1)
				} else {
					authStrategySyncErrors1.Info.Details[detailsCount].AdditionalProperties = details1.AdditionalProperties
					authStrategySyncErrors1.Info.Details[detailsCount].Message = details1.Message
					authStrategySyncErrors1.Info.Details[detailsCount].Type = details1.Type
				}
			}
		}
		authStrategySyncErrors1.Message = types.StringValue(authStrategySyncErrorsItem.Message)
		authStrategySyncErrors1.PluginName = types.StringPointerValue(authStrategySyncErrorsItem.PluginName)
		if authStrategySyncErrorsItem.Value != nil {
			authStrategySyncErrors1.Value = types.StringValue(string(*authStrategySyncErrorsItem.Value))
		} else {
			authStrategySyncErrors1.Value = types.StringNull()
		}
		if authStrategySyncErrorsCount+1 > len(r.AuthStrategySyncErrors) {
			r.AuthStrategySyncErrors = append(r.AuthStrategySyncErrors, authStrategySyncErrors1)
		} else {
			r.AuthStrategySyncErrors[authStrategySyncErrorsCount].Info = authStrategySyncErrors1.Info
			r.AuthStrategySyncErrors[authStrategySyncErrorsCount].Message = authStrategySyncErrors1.Message
			r.AuthStrategySyncErrors[authStrategySyncErrorsCount].PluginName = authStrategySyncErrors1.PluginName
			r.AuthStrategySyncErrors[authStrategySyncErrorsCount].Value = authStrategySyncErrors1.Value
		}
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	r.Deprecated = types.BoolValue(resp.Deprecated)
	if resp.GatewayService == nil {
		r.GatewayService = nil
	} else {
		r.GatewayService = &GatewayServicePayload{}
		r.GatewayService.ControlPlaneID = types.StringValue(resp.GatewayService.ControlPlaneID)
		r.GatewayService.ID = types.StringPointerValue(resp.GatewayService.ID)
		r.GatewayService.RuntimeGroupID = types.StringPointerValue(resp.GatewayService.RuntimeGroupID)
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	r.PublishStatus = types.StringValue(string(resp.PublishStatus))
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
}

func (r *APIProductVersionResourceModel) ToSharedUpdateAPIProductVersionDTO() *shared.UpdateAPIProductVersionDTO {
	deprecated := new(bool)
	if !r.Deprecated.IsUnknown() && !r.Deprecated.IsNull() {
		*deprecated = r.Deprecated.ValueBool()
	} else {
		deprecated = nil
	}
	var gatewayService *shared.GatewayServicePayload
	if r.GatewayService != nil {
		controlPlaneID := r.GatewayService.ControlPlaneID.ValueString()
		id := r.GatewayService.ID.ValueString()
		gatewayService = &shared.GatewayServicePayload{
			ControlPlaneID: controlPlaneID,
			ID:             id,
		}
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	publishStatus := new(shared.UpdateAPIProductVersionDTOPublishStatus)
	if !r.PublishStatus.IsUnknown() && !r.PublishStatus.IsNull() {
		*publishStatus = shared.UpdateAPIProductVersionDTOPublishStatus(r.PublishStatus.ValueString())
	} else {
		publishStatus = nil
	}
	out := shared.UpdateAPIProductVersionDTO{
		Deprecated:     deprecated,
		GatewayService: gatewayService,
		Name:           name,
		PublishStatus:  publishStatus,
	}
	return &out
}
