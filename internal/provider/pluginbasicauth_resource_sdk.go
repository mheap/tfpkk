// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
)

func (r *PluginBasicAuthResourceModel) ToSharedCreateBasicAuthPlugin() *shared.CreateBasicAuthPlugin {
	anonymous := new(string)
	if !r.Config.Anonymous.IsUnknown() && !r.Config.Anonymous.IsNull() {
		*anonymous = r.Config.Anonymous.ValueString()
	} else {
		anonymous = nil
	}
	hideCredentials := new(bool)
	if !r.Config.HideCredentials.IsUnknown() && !r.Config.HideCredentials.IsNull() {
		*hideCredentials = r.Config.HideCredentials.ValueBool()
	} else {
		hideCredentials = nil
	}
	config := shared.CreateBasicAuthPluginConfig{
		Anonymous:       anonymous,
		HideCredentials: hideCredentials,
	}
	var consumer *shared.CreateBasicAuthPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateBasicAuthPluginConsumer{
			ID: id,
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateBasicAuthPluginProtocols = nil
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateBasicAuthPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.CreateBasicAuthPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateBasicAuthPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateBasicAuthPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateBasicAuthPluginService{
			ID: id2,
		}
	}
	var tags []string = nil
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.CreateBasicAuthPlugin{
		Config:    config,
		Consumer:  consumer,
		Enabled:   enabled,
		Protocols: protocols,
		Route:     route,
		Service:   service,
		Tags:      tags,
	}
	return &out
}

func (r *PluginBasicAuthResourceModel) RefreshFromSharedBasicAuthPlugin(resp *shared.BasicAuthPlugin) {
	r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
	r.Config.HideCredentials = types.BoolPointerValue(resp.Config.HideCredentials)
	if resp.Consumer == nil {
		r.Consumer = nil
	} else {
		r.Consumer = &CreateACLConsumer{}
		r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
	}
	r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.ID = types.StringPointerValue(resp.ID)
	r.Protocols = nil
	for _, v := range resp.Protocols {
		r.Protocols = append(r.Protocols, types.StringValue(string(v)))
	}
	if resp.Route == nil {
		r.Route = nil
	} else {
		r.Route = &CreateACLConsumer{}
		r.Route.ID = types.StringPointerValue(resp.Route.ID)
	}
	if resp.Service == nil {
		r.Service = nil
	} else {
		r.Service = &CreateACLConsumer{}
		r.Service.ID = types.StringPointerValue(resp.Service.ID)
	}
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
}
