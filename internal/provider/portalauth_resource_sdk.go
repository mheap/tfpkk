// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"konnect/internal/sdk/pkg/models/shared"
)

func (r *PortalAuthResourceModel) ToCreateSDKType() *shared.PortalAuthenticationSettingsUpdateRequest {
	basicAuthEnabled := new(bool)
	if !r.BasicAuthEnabled.IsUnknown() && !r.BasicAuthEnabled.IsNull() {
		*basicAuthEnabled = r.BasicAuthEnabled.ValueBool()
	} else {
		basicAuthEnabled = nil
	}
	konnectMappingEnabled := new(bool)
	if !r.KonnectMappingEnabled.IsUnknown() && !r.KonnectMappingEnabled.IsNull() {
		*konnectMappingEnabled = r.KonnectMappingEnabled.ValueBool()
	} else {
		konnectMappingEnabled = nil
	}
	oidcAuthEnabled := new(bool)
	if !r.OidcAuthEnabled.IsUnknown() && !r.OidcAuthEnabled.IsNull() {
		*oidcAuthEnabled = r.OidcAuthEnabled.ValueBool()
	} else {
		oidcAuthEnabled = nil
	}
	var oidcClaimMappings *shared.PortalClaimMappings
	if r.OidcClaimMappings != nil {
		email := new(string)
		if !r.OidcClaimMappings.Email.IsUnknown() && !r.OidcClaimMappings.Email.IsNull() {
			*email = r.OidcClaimMappings.Email.ValueString()
		} else {
			email = nil
		}
		groups := new(string)
		if !r.OidcClaimMappings.Groups.IsUnknown() && !r.OidcClaimMappings.Groups.IsNull() {
			*groups = r.OidcClaimMappings.Groups.ValueString()
		} else {
			groups = nil
		}
		name := new(string)
		if !r.OidcClaimMappings.Name.IsUnknown() && !r.OidcClaimMappings.Name.IsNull() {
			*name = r.OidcClaimMappings.Name.ValueString()
		} else {
			name = nil
		}
		oidcClaimMappings = &shared.PortalClaimMappings{
			Email:  email,
			Groups: groups,
			Name:   name,
		}
	}
	oidcClientID := new(string)
	if !r.OidcClientID.IsUnknown() && !r.OidcClientID.IsNull() {
		*oidcClientID = r.OidcClientID.ValueString()
	} else {
		oidcClientID = nil
	}
	oidcClientSecret := new(string)
	if !r.OidcClientSecret.IsUnknown() && !r.OidcClientSecret.IsNull() {
		*oidcClientSecret = r.OidcClientSecret.ValueString()
	} else {
		oidcClientSecret = nil
	}
	oidcIssuer := new(string)
	if !r.OidcIssuer.IsUnknown() && !r.OidcIssuer.IsNull() {
		*oidcIssuer = r.OidcIssuer.ValueString()
	} else {
		oidcIssuer = nil
	}
	var oidcScopes []string = nil
	for _, oidcScopesItem := range r.OidcScopes {
		oidcScopes = append(oidcScopes, oidcScopesItem.ValueString())
	}
	oidcTeamMappingEnabled := new(bool)
	if !r.OidcTeamMappingEnabled.IsUnknown() && !r.OidcTeamMappingEnabled.IsNull() {
		*oidcTeamMappingEnabled = r.OidcTeamMappingEnabled.ValueBool()
	} else {
		oidcTeamMappingEnabled = nil
	}
	out := shared.PortalAuthenticationSettingsUpdateRequest{
		BasicAuthEnabled:       basicAuthEnabled,
		KonnectMappingEnabled:  konnectMappingEnabled,
		OidcAuthEnabled:        oidcAuthEnabled,
		OidcClaimMappings:      oidcClaimMappings,
		OidcClientID:           oidcClientID,
		OidcClientSecret:       oidcClientSecret,
		OidcIssuer:             oidcIssuer,
		OidcScopes:             oidcScopes,
		OidcTeamMappingEnabled: oidcTeamMappingEnabled,
	}
	return &out
}

func (r *PortalAuthResourceModel) ToGetSDKType() *shared.PortalAuthenticationSettingsUpdateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *PortalAuthResourceModel) ToUpdateSDKType() *shared.PortalAuthenticationSettingsUpdateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *PortalAuthResourceModel) RefreshFromGetResponse(resp *shared.PortalAuthenticationSettings) {
	r.BasicAuthEnabled = types.BoolValue(resp.BasicAuthEnabled)
	r.KonnectMappingEnabled = types.BoolValue(resp.KonnectMappingEnabled)
	r.OidcAuthEnabled = types.BoolValue(resp.OidcAuthEnabled)
	if r.OidcConfig == nil {
		r.OidcConfig = &PortalOIDCConfig{}
	}
	if resp.OidcConfig == nil {
		r.OidcConfig = nil
	} else {
		r.OidcConfig = &PortalOIDCConfig{}
		if r.OidcConfig.ClaimMappings == nil {
			r.OidcConfig.ClaimMappings = &PortalClaimMappings{}
		}
		if resp.OidcConfig.ClaimMappings == nil {
			r.OidcConfig.ClaimMappings = nil
		} else {
			r.OidcConfig.ClaimMappings = &PortalClaimMappings{}
			if resp.OidcConfig.ClaimMappings.Email != nil {
				r.OidcConfig.ClaimMappings.Email = types.StringValue(*resp.OidcConfig.ClaimMappings.Email)
			} else {
				r.OidcConfig.ClaimMappings.Email = types.StringNull()
			}
			if resp.OidcConfig.ClaimMappings.Groups != nil {
				r.OidcConfig.ClaimMappings.Groups = types.StringValue(*resp.OidcConfig.ClaimMappings.Groups)
			} else {
				r.OidcConfig.ClaimMappings.Groups = types.StringNull()
			}
			if resp.OidcConfig.ClaimMappings.Name != nil {
				r.OidcConfig.ClaimMappings.Name = types.StringValue(*resp.OidcConfig.ClaimMappings.Name)
			} else {
				r.OidcConfig.ClaimMappings.Name = types.StringNull()
			}
		}
		r.OidcConfig.ClientID = types.StringValue(resp.OidcConfig.ClientID)
		r.OidcConfig.Issuer = types.StringValue(resp.OidcConfig.Issuer)
		r.OidcConfig.Scopes = nil
		for _, v := range resp.OidcConfig.Scopes {
			r.OidcConfig.Scopes = append(r.OidcConfig.Scopes, types.StringValue(v))
		}
	}
	r.OidcTeamMappingEnabled = types.BoolValue(resp.OidcTeamMappingEnabled)
}

func (r *PortalAuthResourceModel) RefreshFromCreateResponse(resp *shared.PortalAuthenticationSettings) {
	r.RefreshFromGetResponse(resp)
}

func (r *PortalAuthResourceModel) RefreshFromUpdateResponse(resp *shared.PortalAuthenticationSettings) {
	r.RefreshFromGetResponse(resp)
}
