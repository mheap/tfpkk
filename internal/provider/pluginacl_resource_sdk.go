// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
)

func (r *PluginACLResourceModel) ToSharedCreateACLPlugin() *shared.CreateACLPlugin {
	var allow []string = nil
	for _, allowItem := range r.Config.Allow {
		allow = append(allow, allowItem.ValueString())
	}
	var deny []string = nil
	for _, denyItem := range r.Config.Deny {
		deny = append(deny, denyItem.ValueString())
	}
	hideGroupsHeader := new(bool)
	if !r.Config.HideGroupsHeader.IsUnknown() && !r.Config.HideGroupsHeader.IsNull() {
		*hideGroupsHeader = r.Config.HideGroupsHeader.ValueBool()
	} else {
		hideGroupsHeader = nil
	}
	includeConsumerGroups := new(bool)
	if !r.Config.IncludeConsumerGroups.IsUnknown() && !r.Config.IncludeConsumerGroups.IsNull() {
		*includeConsumerGroups = r.Config.IncludeConsumerGroups.ValueBool()
	} else {
		includeConsumerGroups = nil
	}
	config := shared.CreateACLPluginConfig{
		Allow:                 allow,
		Deny:                  deny,
		HideGroupsHeader:      hideGroupsHeader,
		IncludeConsumerGroups: includeConsumerGroups,
	}
	var consumer *shared.CreateACLPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateACLPluginConsumer{
			ID: id,
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateACLPluginProtocols = nil
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateACLPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.CreateACLPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateACLPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateACLPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateACLPluginService{
			ID: id2,
		}
	}
	var tags []string = nil
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.CreateACLPlugin{
		Config:    config,
		Consumer:  consumer,
		Enabled:   enabled,
		Protocols: protocols,
		Route:     route,
		Service:   service,
		Tags:      tags,
	}
	return &out
}

func (r *PluginACLResourceModel) RefreshFromSharedACLPlugin(resp *shared.ACLPlugin) {
	r.Config.Allow = nil
	for _, v := range resp.Config.Allow {
		r.Config.Allow = append(r.Config.Allow, types.StringValue(v))
	}
	r.Config.Deny = nil
	for _, v := range resp.Config.Deny {
		r.Config.Deny = append(r.Config.Deny, types.StringValue(v))
	}
	r.Config.HideGroupsHeader = types.BoolPointerValue(resp.Config.HideGroupsHeader)
	r.Config.IncludeConsumerGroups = types.BoolPointerValue(resp.Config.IncludeConsumerGroups)
	if resp.Consumer == nil {
		r.Consumer = nil
	} else {
		r.Consumer = &CreateACLConsumer{}
		r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
	}
	r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.ID = types.StringPointerValue(resp.ID)
	r.Protocols = nil
	for _, v := range resp.Protocols {
		r.Protocols = append(r.Protocols, types.StringValue(string(v)))
	}
	if resp.Route == nil {
		r.Route = nil
	} else {
		r.Route = &CreateACLConsumer{}
		r.Route.ID = types.StringPointerValue(resp.Route.ID)
	}
	if resp.Service == nil {
		r.Service = nil
	} else {
		r.Service = &CreateACLConsumer{}
		r.Service.ID = types.StringPointerValue(resp.Service.ID)
	}
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
}
