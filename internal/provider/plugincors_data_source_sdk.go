// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
	"math/big"
)

func (r *PluginCORSDataSourceModel) RefreshFromSharedCORSPlugin(resp *shared.CORSPlugin) {
	r.Config.Credentials = types.BoolPointerValue(resp.Config.Credentials)
	r.Config.ExposedHeaders = nil
	for _, v := range resp.Config.ExposedHeaders {
		r.Config.ExposedHeaders = append(r.Config.ExposedHeaders, types.StringValue(v))
	}
	r.Config.Headers = nil
	for _, v := range resp.Config.Headers {
		r.Config.Headers = append(r.Config.Headers, types.StringValue(v))
	}
	if resp.Config.MaxAge != nil {
		r.Config.MaxAge = types.NumberValue(big.NewFloat(float64(*resp.Config.MaxAge)))
	} else {
		r.Config.MaxAge = types.NumberNull()
	}
	r.Config.Methods = nil
	for _, v := range resp.Config.Methods {
		r.Config.Methods = append(r.Config.Methods, types.StringValue(string(v)))
	}
	r.Config.Origins = nil
	for _, v := range resp.Config.Origins {
		r.Config.Origins = append(r.Config.Origins, types.StringValue(v))
	}
	r.Config.PreflightContinue = types.BoolPointerValue(resp.Config.PreflightContinue)
	r.Config.PrivateNetwork = types.BoolPointerValue(resp.Config.PrivateNetwork)
	if resp.Consumer == nil {
		r.Consumer = nil
	} else {
		r.Consumer = &CreateACLConsumer{}
		r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
	}
	r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.ID = types.StringPointerValue(resp.ID)
	r.Protocols = nil
	for _, v := range resp.Protocols {
		r.Protocols = append(r.Protocols, types.StringValue(string(v)))
	}
	if resp.Route == nil {
		r.Route = nil
	} else {
		r.Route = &CreateACLConsumer{}
		r.Route.ID = types.StringPointerValue(resp.Route.ID)
	}
	if resp.Service == nil {
		r.Service = nil
	} else {
		r.Service = &CreateACLConsumer{}
		r.Service.ID = types.StringPointerValue(resp.Service.ID)
	}
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
}
