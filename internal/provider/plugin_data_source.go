// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect/internal/sdk"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PluginDataSource{}
var _ datasource.DataSourceWithConfigure = &PluginDataSource{}

func NewPluginDataSource() datasource.DataSource {
	return &PluginDataSource{}
}

// PluginDataSource is the data source implementation.
type PluginDataSource struct {
	client *sdk.Konnect
}

// PluginDataSourceModel describes the data model.
type PluginDataSourceModel struct {
	Config         types.String    `tfsdk:"config"`
	Consumer       *PluginConsumer `tfsdk:"consumer"`
	ControlPlaneID types.String    `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64     `tfsdk:"created_at"`
	Enabled        types.Bool      `tfsdk:"enabled"`
	FilterTags     types.String    `tfsdk:"filter_tags"`
	ID             types.String    `tfsdk:"id"`
	InstanceName   types.String    `tfsdk:"instance_name"`
	Name           types.String    `tfsdk:"name"`
	Offset         types.String    `tfsdk:"offset"`
	Ordering       *Ordering       `tfsdk:"ordering"`
	Protocols      []types.String  `tfsdk:"protocols"`
	Route          *PluginConsumer `tfsdk:"route"`
	Service        *PluginConsumer `tfsdk:"service"`
	Size           types.Int64     `tfsdk:"size"`
	Tags           []types.String  `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *PluginDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_plugin"
}

// Schema defines the schema for the data source.
func (r *PluginDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Plugin DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.StringAttribute{
				Computed:    true,
				Description: `The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/). Parsed as JSON.`,
			},
			"consumer": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.`,
			},
			"control_plane_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your control plane. This variable is available in the Konnect manager`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the plugin is applied. Default: true`,
			},
			"filter_tags": schema.StringAttribute{
				Optional:    true,
				Description: `A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The unique identifier of the Plugin to create or update.`,
			},
			"instance_name": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.`,
			},
			"offset": schema.StringAttribute{
				Optional:    true,
				Description: `Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed:   true,
				Attributes: map[string]schema.Attribute{},
			},
			"protocols": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support ` + "`" + `tcp` + "`" + ` and ` + "`" + `tls` + "`" + `.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service. Leave unset for the plugin to activate regardless of the service being matched.`,
			},
			"size": schema.Int64Attribute{
				Optional:    true,
				Description: `Number of resources to be returned. Default: 100`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
		},
	}
}

func (r *PluginDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PluginDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PluginDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	controlPlaneID := data.ControlPlaneID.ValueString()
	filterTags := new(string)
	if !data.FilterTags.IsUnknown() && !data.FilterTags.IsNull() {
		*filterTags = data.FilterTags.ValueString()
	} else {
		filterTags = nil
	}
	offset := new(string)
	if !data.Offset.IsUnknown() && !data.Offset.IsNull() {
		*offset = data.Offset.ValueString()
	} else {
		offset = nil
	}
	pluginIDOrInstanceName := data.ID.ValueString()
	size := new(int64)
	if !data.Size.IsUnknown() && !data.Size.IsNull() {
		*size = data.Size.ValueInt64()
	} else {
		size = nil
	}
	request := operations.GetPluginRequest{
		ControlPlaneID:         controlPlaneID,
		FilterTags:             filterTags,
		Offset:                 offset,
		PluginIDOrInstanceName: pluginIDOrInstanceName,
		Size:                   size,
	}
	res, err := r.client.Plugins.GetPlugin(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Plugin == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPlugin(res.Plugin)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
