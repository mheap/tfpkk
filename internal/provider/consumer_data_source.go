// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect/internal/sdk"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ConsumerDataSource{}
var _ datasource.DataSourceWithConfigure = &ConsumerDataSource{}

func NewConsumerDataSource() datasource.DataSource {
	return &ConsumerDataSource{}
}

// ConsumerDataSource is the data source implementation.
type ConsumerDataSource struct {
	client *sdk.Konnect
}

// ConsumerDataSourceModel describes the data model.
type ConsumerDataSourceModel struct {
	ControlPlaneID types.String   `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64    `tfsdk:"created_at"`
	CustomID       types.String   `tfsdk:"custom_id"`
	FilterTags     types.String   `tfsdk:"filter_tags"`
	ID             types.String   `tfsdk:"id"`
	Offset         types.String   `tfsdk:"offset"`
	Size           types.Int64    `tfsdk:"size"`
	Tags           []types.String `tfsdk:"tags"`
	UpdatedAt      types.Int64    `tfsdk:"updated_at"`
	Username       types.String   `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (r *ConsumerDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_consumer"
}

// Schema defines the schema for the data source.
func (r *ConsumerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Consumer DataSource",

		Attributes: map[string]schema.Attribute{
			"control_plane_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your control plane. This variable is available in the Konnect manager`,
			},
			"created_at": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `Unix epoch when the resource was created.` + "\n" +
					``,
			},
			"custom_id": schema.StringAttribute{
				Computed:    true,
				Description: `Field for the unique consumer ID`,
			},
			"filter_tags": schema.StringAttribute{
				Optional:    true,
				Description: `A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The unique identifier or the username of the Consumer to retrieve.`,
			},
			"offset": schema.StringAttribute{
				Optional:    true,
				Description: `Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources`,
			},
			"size": schema.Int64Attribute{
				Optional:    true,
				Description: `Number of resources to be returned. Default: 100`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Consumer for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `Unix epoch when the resource was updated.` + "\n" +
					``,
			},
			"username": schema.StringAttribute{
				Computed:    true,
				Description: `The unique username of the consumer.`,
			},
		},
	}
}

func (r *ConsumerDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ConsumerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ConsumerDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	consumerID := data.ID.ValueString()
	controlPlaneID := data.ControlPlaneID.ValueString()
	filterTags := new(string)
	if !data.FilterTags.IsUnknown() && !data.FilterTags.IsNull() {
		*filterTags = data.FilterTags.ValueString()
	} else {
		filterTags = nil
	}
	offset := new(string)
	if !data.Offset.IsUnknown() && !data.Offset.IsNull() {
		*offset = data.Offset.ValueString()
	} else {
		offset = nil
	}
	size := new(int64)
	if !data.Size.IsUnknown() && !data.Size.IsNull() {
		*size = data.Size.ValueInt64()
	} else {
		size = nil
	}
	request := operations.GetConsumerRequest{
		ConsumerID:     consumerID,
		ControlPlaneID: controlPlaneID,
		FilterTags:     filterTags,
		Offset:         offset,
		Size:           size,
	}
	res, err := r.client.Consumers.GetConsumer(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Object == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetConsumerResponseBody(res.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
