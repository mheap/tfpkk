// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"konnect/internal/sdk/pkg/models/operations"
	"konnect/internal/sdk/pkg/models/shared"
)

func (r *ServiceResourceModel) ToCreateSDKType() *shared.Service {
	var caCertificates []string = nil
	for _, caCertificatesItem := range r.CaCertificates {
		caCertificates = append(caCertificates, caCertificatesItem.ValueString())
	}
	var clientCertificate *shared.ServiceClientCertificate
	if r.ClientCertificate != nil {
		id := new(string)
		if !r.ClientCertificate.ID.IsUnknown() && !r.ClientCertificate.ID.IsNull() {
			*id = r.ClientCertificate.ID.ValueString()
		} else {
			id = nil
		}
		clientCertificate = &shared.ServiceClientCertificate{
			ID: id,
		}
	}
	connectTimeout := new(int64)
	if !r.ConnectTimeout.IsUnknown() && !r.ConnectTimeout.IsNull() {
		*connectTimeout = r.ConnectTimeout.ValueInt64()
	} else {
		connectTimeout = nil
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	host := new(string)
	if !r.Host.IsUnknown() && !r.Host.IsNull() {
		*host = r.Host.ValueString()
	} else {
		host = nil
	}
	id1 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id1 = r.ID.ValueString()
	} else {
		id1 = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	path := new(string)
	if !r.Path.IsUnknown() && !r.Path.IsNull() {
		*path = r.Path.ValueString()
	} else {
		path = nil
	}
	port := new(int64)
	if !r.Port.IsUnknown() && !r.Port.IsNull() {
		*port = r.Port.ValueInt64()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Protocol.IsUnknown() && !r.Protocol.IsNull() {
		*protocol = r.Protocol.ValueString()
	} else {
		protocol = nil
	}
	readTimeout := new(int64)
	if !r.ReadTimeout.IsUnknown() && !r.ReadTimeout.IsNull() {
		*readTimeout = r.ReadTimeout.ValueInt64()
	} else {
		readTimeout = nil
	}
	retries := new(int64)
	if !r.Retries.IsUnknown() && !r.Retries.IsNull() {
		*retries = r.Retries.ValueInt64()
	} else {
		retries = nil
	}
	var tags []string = nil
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	tlsVerify := new(bool)
	if !r.TLSVerify.IsUnknown() && !r.TLSVerify.IsNull() {
		*tlsVerify = r.TLSVerify.ValueBool()
	} else {
		tlsVerify = nil
	}
	tlsVerifyDepth := new(int64)
	if !r.TLSVerifyDepth.IsUnknown() && !r.TLSVerifyDepth.IsNull() {
		*tlsVerifyDepth = r.TLSVerifyDepth.ValueInt64()
	} else {
		tlsVerifyDepth = nil
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	writeTimeout := new(int64)
	if !r.WriteTimeout.IsUnknown() && !r.WriteTimeout.IsNull() {
		*writeTimeout = r.WriteTimeout.ValueInt64()
	} else {
		writeTimeout = nil
	}
	out := shared.Service{
		CaCertificates:    caCertificates,
		ClientCertificate: clientCertificate,
		ConnectTimeout:    connectTimeout,
		CreatedAt:         createdAt,
		Enabled:           enabled,
		Host:              host,
		ID:                id1,
		Name:              name,
		Path:              path,
		Port:              port,
		Protocol:          protocol,
		ReadTimeout:       readTimeout,
		Retries:           retries,
		Tags:              tags,
		TLSVerify:         tlsVerify,
		TLSVerifyDepth:    tlsVerifyDepth,
		UpdatedAt:         updatedAt,
		URL:               url,
		WriteTimeout:      writeTimeout,
	}
	return &out
}

func (r *ServiceResourceModel) ToGetSDKType() *shared.Service {
	out := r.ToCreateSDKType()
	return out
}

func (r *ServiceResourceModel) ToUpdateSDKType() *shared.Service {
	out := r.ToCreateSDKType()
	return out
}

func (r *ServiceResourceModel) ToDeleteSDKType() *shared.Service {
	out := r.ToCreateSDKType()
	return out
}

func (r *ServiceResourceModel) RefreshFromGetResponse(resp *operations.GetService200ApplicationJSON) {
	if resp.ConnectTimeout != nil {
		r.ConnectTimeout = types.Int64Value(*resp.ConnectTimeout)
	} else {
		r.ConnectTimeout = types.Int64Null()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.Int64Value(*resp.CreatedAt)
	} else {
		r.CreatedAt = types.Int64Null()
	}
	if resp.Enabled != nil {
		r.Enabled = types.BoolValue(*resp.Enabled)
	} else {
		r.Enabled = types.BoolNull()
	}
	if resp.Host != nil {
		r.Host = types.StringValue(*resp.Host)
	} else {
		r.Host = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.Path != nil {
		r.Path = types.StringValue(*resp.Path)
	} else {
		r.Path = types.StringNull()
	}
	if resp.Port != nil {
		r.Port = types.Int64Value(*resp.Port)
	} else {
		r.Port = types.Int64Null()
	}
	if resp.Protocol != nil {
		r.Protocol = types.StringValue(*resp.Protocol)
	} else {
		r.Protocol = types.StringNull()
	}
	if resp.ReadTimeout != nil {
		r.ReadTimeout = types.Int64Value(*resp.ReadTimeout)
	} else {
		r.ReadTimeout = types.Int64Null()
	}
	if resp.Retries != nil {
		r.Retries = types.Int64Value(*resp.Retries)
	} else {
		r.Retries = types.Int64Null()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.Int64Value(*resp.UpdatedAt)
	} else {
		r.UpdatedAt = types.Int64Null()
	}
	if resp.WriteTimeout != nil {
		r.WriteTimeout = types.Int64Value(*resp.WriteTimeout)
	} else {
		r.WriteTimeout = types.Int64Null()
	}
}

func (r *ServiceResourceModel) RefreshFromCreateResponse(resp *operations.CreateService201ApplicationJSON) {
	if resp.ConnectTimeout != nil {
		r.ConnectTimeout = types.Int64Value(*resp.ConnectTimeout)
	} else {
		r.ConnectTimeout = types.Int64Null()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.Int64Value(*resp.CreatedAt)
	} else {
		r.CreatedAt = types.Int64Null()
	}
	if resp.Enabled != nil {
		r.Enabled = types.BoolValue(*resp.Enabled)
	} else {
		r.Enabled = types.BoolNull()
	}
	if resp.Host != nil {
		r.Host = types.StringValue(*resp.Host)
	} else {
		r.Host = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.Path != nil {
		r.Path = types.StringValue(*resp.Path)
	} else {
		r.Path = types.StringNull()
	}
	if resp.Port != nil {
		r.Port = types.Int64Value(*resp.Port)
	} else {
		r.Port = types.Int64Null()
	}
	if resp.Protocol != nil {
		r.Protocol = types.StringValue(*resp.Protocol)
	} else {
		r.Protocol = types.StringNull()
	}
	if resp.ReadTimeout != nil {
		r.ReadTimeout = types.Int64Value(*resp.ReadTimeout)
	} else {
		r.ReadTimeout = types.Int64Null()
	}
	if resp.Retries != nil {
		r.Retries = types.Int64Value(*resp.Retries)
	} else {
		r.Retries = types.Int64Null()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.Int64Value(*resp.UpdatedAt)
	} else {
		r.UpdatedAt = types.Int64Null()
	}
	if resp.WriteTimeout != nil {
		r.WriteTimeout = types.Int64Value(*resp.WriteTimeout)
	} else {
		r.WriteTimeout = types.Int64Null()
	}
}

func (r *ServiceResourceModel) RefreshFromUpdateResponse(resp *operations.UpsertService200ApplicationJSON) {
	if resp.ConnectTimeout != nil {
		r.ConnectTimeout = types.Int64Value(*resp.ConnectTimeout)
	} else {
		r.ConnectTimeout = types.Int64Null()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.Int64Value(*resp.CreatedAt)
	} else {
		r.CreatedAt = types.Int64Null()
	}
	if resp.Enabled != nil {
		r.Enabled = types.BoolValue(*resp.Enabled)
	} else {
		r.Enabled = types.BoolNull()
	}
	if resp.Host != nil {
		r.Host = types.StringValue(*resp.Host)
	} else {
		r.Host = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.Path != nil {
		r.Path = types.StringValue(*resp.Path)
	} else {
		r.Path = types.StringNull()
	}
	if resp.Port != nil {
		r.Port = types.Int64Value(*resp.Port)
	} else {
		r.Port = types.Int64Null()
	}
	if resp.Protocol != nil {
		r.Protocol = types.StringValue(*resp.Protocol)
	} else {
		r.Protocol = types.StringNull()
	}
	if resp.ReadTimeout != nil {
		r.ReadTimeout = types.Int64Value(*resp.ReadTimeout)
	} else {
		r.ReadTimeout = types.Int64Null()
	}
	if resp.Retries != nil {
		r.Retries = types.Int64Value(*resp.Retries)
	} else {
		r.Retries = types.Int64Null()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.Int64Value(*resp.UpdatedAt)
	} else {
		r.UpdatedAt = types.Int64Null()
	}
	if resp.WriteTimeout != nil {
		r.WriteTimeout = types.Int64Value(*resp.WriteTimeout)
	} else {
		r.WriteTimeout = types.Int64Null()
	}
}
