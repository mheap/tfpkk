// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"Konnect/internal/sdk/pkg/utils"
	"fmt"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://global.api.konghq.com/v2",
	"https://us.api.konghq.com/v2",
	// Production
	"https://eu.api.konghq.com/v2",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

type sdkConfiguration struct {
	DefaultClient     HTTPClient
	SecurityClient    HTTPClient
	Security          *shared.Security
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// Konnect - Konnect API: The Konnect platform API
type Konnect struct {
	APIProductDocumentation        *apiProductDocumentation
	APIProductVersionSpecification *apiProductVersionSpecification
	APIProductVersions             *apiProductVersions
	APIProducts                    *apiProducts
	AuditLogs                      *auditLogs
	AuthSettings                   *authSettings
	// CACertificates - CA certificates
	CACertificates *caCertificates
	// Certificates - Certificates
	Certificates           *certificates
	CompositeRuntimeGroups *compositeRuntimeGroups
	// Consumers - Consumers
	Consumers     *consumers
	CustomReports *customReports
	// DPCertificates - DP Certificates
	DPCertificates *dpCertificates
	// DPNodes - DP Nodes
	DPNodes *dpNodes
	// Debug - Debug routes
	Debug *debug
	// Information - Information routes
	Information *information
	Invites     *invites
	// KeySets - Key-sets
	KeySets *keySets
	// Keys - Keys
	Keys *keys
	// Plugins - Plugins
	Plugins              *plugins
	PortalAuthSettings   *portalAuthSettings
	PortalDevelopers     *portalDevelopers
	PortalRoles          *portalRoles
	PortalTeamMembership *portalTeamMembership
	PortalTeamRoles      *portalTeamRoles
	PortalTeams          *portalTeams
	Roles                *roles
	// Routes - Gateway routes
	Routes        *routes
	RuntimeGroups *runtimeGroups
	// SNIs - SNIs
	SNIs *snIs
	// Services - Gateway services
	Services                     *services
	SystemAccounts               *systemAccounts
	SystemAccountsAccessTokens   *systemAccountsAccessTokens
	SystemAccountsRoles          *systemAccountsRoles
	SystemAccountsTeamMembership *systemAccountsTeamMembership
	// Targets - Target routes
	Targets        *targets
	TeamMembership *teamMembership
	Teams          *teams
	// Upstreams - Upstreams
	Upstreams *upstreams
	Users     *users
	// Vaults - Vaults
	Vaults *vaults
	// ConsumerGroups - Consumer Groups
	ConsumerGroups *consumerGroups

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Konnect)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Konnect) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Konnect) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Konnect) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Konnect) {
		sdk.sdkConfiguration.DefaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Konnect) {
		sdk.sdkConfiguration.Security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Konnect {
	sdk := &Konnect{
		sdkConfiguration: sdkConfiguration{
			Language:          "terraform",
			OpenAPIDocVersion: "2.0.0",
			SDKVersion:        "0.2.2",
			GenVersion:        "2.83.3",
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.DefaultClient == nil {
		sdk.sdkConfiguration.DefaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk.sdkConfiguration.SecurityClient == nil {
		if sdk.sdkConfiguration.Security != nil {
			sdk.sdkConfiguration.SecurityClient = utils.ConfigureSecurityClient(sdk.sdkConfiguration.DefaultClient, sdk.sdkConfiguration.Security)
		} else {
			sdk.sdkConfiguration.SecurityClient = sdk.sdkConfiguration.DefaultClient
		}
	}

	sdk.APIProductDocumentation = newAPIProductDocumentation(sdk.sdkConfiguration)

	sdk.APIProductVersionSpecification = newAPIProductVersionSpecification(sdk.sdkConfiguration)

	sdk.APIProductVersions = newAPIProductVersions(sdk.sdkConfiguration)

	sdk.APIProducts = newAPIProducts(sdk.sdkConfiguration)

	sdk.AuditLogs = newAuditLogs(sdk.sdkConfiguration)

	sdk.AuthSettings = newAuthSettings(sdk.sdkConfiguration)

	sdk.CACertificates = newCACertificates(sdk.sdkConfiguration)

	sdk.Certificates = newCertificates(sdk.sdkConfiguration)

	sdk.CompositeRuntimeGroups = newCompositeRuntimeGroups(sdk.sdkConfiguration)

	sdk.Consumers = newConsumers(sdk.sdkConfiguration)

	sdk.CustomReports = newCustomReports(sdk.sdkConfiguration)

	sdk.DPCertificates = newDPCertificates(sdk.sdkConfiguration)

	sdk.DPNodes = newDPNodes(sdk.sdkConfiguration)

	sdk.Debug = newDebug(sdk.sdkConfiguration)

	sdk.Information = newInformation(sdk.sdkConfiguration)

	sdk.Invites = newInvites(sdk.sdkConfiguration)

	sdk.KeySets = newKeySets(sdk.sdkConfiguration)

	sdk.Keys = newKeys(sdk.sdkConfiguration)

	sdk.Plugins = newPlugins(sdk.sdkConfiguration)

	sdk.PortalAuthSettings = newPortalAuthSettings(sdk.sdkConfiguration)

	sdk.PortalDevelopers = newPortalDevelopers(sdk.sdkConfiguration)

	sdk.PortalRoles = newPortalRoles(sdk.sdkConfiguration)

	sdk.PortalTeamMembership = newPortalTeamMembership(sdk.sdkConfiguration)

	sdk.PortalTeamRoles = newPortalTeamRoles(sdk.sdkConfiguration)

	sdk.PortalTeams = newPortalTeams(sdk.sdkConfiguration)

	sdk.Roles = newRoles(sdk.sdkConfiguration)

	sdk.Routes = newRoutes(sdk.sdkConfiguration)

	sdk.RuntimeGroups = newRuntimeGroups(sdk.sdkConfiguration)

	sdk.SNIs = newSNIs(sdk.sdkConfiguration)

	sdk.Services = newServices(sdk.sdkConfiguration)

	sdk.SystemAccounts = newSystemAccounts(sdk.sdkConfiguration)

	sdk.SystemAccountsAccessTokens = newSystemAccountsAccessTokens(sdk.sdkConfiguration)

	sdk.SystemAccountsRoles = newSystemAccountsRoles(sdk.sdkConfiguration)

	sdk.SystemAccountsTeamMembership = newSystemAccountsTeamMembership(sdk.sdkConfiguration)

	sdk.Targets = newTargets(sdk.sdkConfiguration)

	sdk.TeamMembership = newTeamMembership(sdk.sdkConfiguration)

	sdk.Teams = newTeams(sdk.sdkConfiguration)

	sdk.Upstreams = newUpstreams(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.Vaults = newVaults(sdk.sdkConfiguration)

	sdk.ConsumerGroups = newConsumerGroups(sdk.sdkConfiguration)

	return sdk
}
