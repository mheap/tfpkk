// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type APIProductDocumentMetadata struct {
}

type APIProductDocumentStatus string

const (
	APIProductDocumentStatusUnpublished APIProductDocumentStatus = "unpublished"
	APIProductDocumentStatusPublished   APIProductDocumentStatus = "published"
)

func (e APIProductDocumentStatus) ToPointer() *APIProductDocumentStatus {
	return &e
}

func (e *APIProductDocumentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unpublished":
		fallthrough
	case "published":
		*e = APIProductDocumentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIProductDocumentStatus: %v", v)
	}
}

// APIProductDocument - an api product document
type APIProductDocument struct {
	Ast []AnyNode `json:"ast"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt        time.Time                  `json:"created_at"`
	ID               string                     `json:"id"`
	Metadata         APIProductDocumentMetadata `json:"metadata"`
	ParentDocumentID string                     `json:"parent_document_id"`
	Slug             string                     `json:"slug"`
	Status           APIProductDocumentStatus   `json:"status"`
	Title            string                     `json:"title"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}
