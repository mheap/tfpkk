// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RelativeTimeRangeTimePeriod - Query data from the specified period relative to now.
type RelativeTimeRangeTimePeriod string

const (
	RelativeTimeRangeTimePeriodFifteenM      RelativeTimeRangeTimePeriod = "15M"
	RelativeTimeRangeTimePeriodOneH          RelativeTimeRangeTimePeriod = "1H"
	RelativeTimeRangeTimePeriodSixH          RelativeTimeRangeTimePeriod = "6H"
	RelativeTimeRangeTimePeriodTwelveH       RelativeTimeRangeTimePeriod = "12H"
	RelativeTimeRangeTimePeriodTwentyFourH   RelativeTimeRangeTimePeriod = "24H"
	RelativeTimeRangeTimePeriodSevenD        RelativeTimeRangeTimePeriod = "7D"
	RelativeTimeRangeTimePeriodThirtyD       RelativeTimeRangeTimePeriod = "30D"
	RelativeTimeRangeTimePeriodCurrentWeek   RelativeTimeRangeTimePeriod = "CURRENT_WEEK"
	RelativeTimeRangeTimePeriodCurrentMonth  RelativeTimeRangeTimePeriod = "CURRENT_MONTH"
	RelativeTimeRangeTimePeriodPreviousWeek  RelativeTimeRangeTimePeriod = "PREVIOUS_WEEK"
	RelativeTimeRangeTimePeriodPreviousMonth RelativeTimeRangeTimePeriod = "PREVIOUS_MONTH"
)

func (e RelativeTimeRangeTimePeriod) ToPointer() *RelativeTimeRangeTimePeriod {
	return &e
}

func (e *RelativeTimeRangeTimePeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "15M":
		fallthrough
	case "1H":
		fallthrough
	case "6H":
		fallthrough
	case "12H":
		fallthrough
	case "24H":
		fallthrough
	case "7D":
		fallthrough
	case "30D":
		fallthrough
	case "CURRENT_WEEK":
		fallthrough
	case "CURRENT_MONTH":
		fallthrough
	case "PREVIOUS_WEEK":
		fallthrough
	case "PREVIOUS_MONTH":
		*e = RelativeTimeRangeTimePeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelativeTimeRangeTimePeriod: %v", v)
	}
}

type RelativeTimeRangeType string

const (
	RelativeTimeRangeTypeRelative RelativeTimeRangeType = "RELATIVE"
)

func (e RelativeTimeRangeType) ToPointer() *RelativeTimeRangeType {
	return &e
}

func (e *RelativeTimeRangeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RELATIVE":
		*e = RelativeTimeRangeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelativeTimeRangeType: %v", v)
	}
}

// RelativeTimeRange - The period of time to return data.  Relative time ranges are relative to the current moment.  Absolute time ranges specify an unchanging period of time.  If not specified, a default relative timeframe of last 24 hours will be chosen.
type RelativeTimeRange struct {
	// Query data from the specified period relative to now.
	TimePeriod RelativeTimeRangeTimePeriod `json:"time_period"`
	Type       RelativeTimeRangeType       `json:"type"`
}
