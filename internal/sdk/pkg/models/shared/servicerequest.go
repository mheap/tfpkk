// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/utils"
)

// ClientCertificate - Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is `client_certificate.id=<client_certificate id>`. With JSON, use `client_certificate:{id:<client_certificate id>}`.
type ClientCertificate struct {
	ID *string `json:"id,omitempty"`
}

func (o *ClientCertificate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Protocol - The protocol used to communicate with the upstream. Accepted values are: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`
// , `wss`
// . Default: `http`.
type Protocol string

const (
	ProtocolGrpc           Protocol = "grpc"
	ProtocolGrpcs          Protocol = "grpcs"
	ProtocolHTTP           Protocol = "http"
	ProtocolHTTPS          Protocol = "https"
	ProtocolTCP            Protocol = "tcp"
	ProtocolTLS            Protocol = "tls "
	ProtocolTLSPassthrough Protocol = "tls_passthrough"
	ProtocolUDP            Protocol = "udp"
	ProtocolWs             Protocol = "ws"
	ProtocolWss            Protocol = "wss"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}

func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls ":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type ServiceRequest struct {
	// Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server’s TLS certificate. If set to null when Nginx default is respected. With form-encoded, the notation is `ca_certificates[]=4e3ad2e4-0bc4-4638-8e34-c84a417ba39b&ca_certificates[]=51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515`. With JSON, use an Array.
	CaCertificates []string `json:"ca_certificates,omitempty"`
	// Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is `client_certificate.id=<client_certificate id>`. With JSON, use `client_certificate:{id:<client_certificate id>}`.
	ClientCertificate *ClientCertificate `json:"client_certificate,omitempty"`
	// The timeout in milliseconds for establishing a connection to the upstream server. Default: `60000`.
	ConnectTimeout *int64 `default:"6000" json:"connect_timeout"`
	// Whether the service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled *bool `default:"true" json:"enabled"`
	// The host of the upstream server. Note that the host value is case sensitive.
	//
	Host string `json:"host"`
	// The service name.
	//
	Name *string `json:"name,omitempty"`
	// The path to be used in requests to the upstream server.
	//
	Path *string `json:"path,omitempty"`
	// The upstream server port. Default: `80`.
	//
	Port *int64 `default:"80" json:"port"`
	// The protocol used to communicate with the upstream. Accepted values are: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`
	// , `wss`
	// . Default: `http`.
	Protocol *Protocol `default:"http" json:"protocol"`
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Default: `60000`.
	//
	ReadTimeout *int64 `default:"6000" json:"read_timeout"`
	// The number of retries to execute upon failure to proxy. Default:`5`.
	//
	Retries *int64 `default:"5" json:"retries"`
	// An optional set of strings associated with the service for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
	// Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.
	//
	TLSVerify *bool `default:"true" json:"tls_verify"`
	// Maximum depth of chain while verifying Upstream server’s TLS certificate. If set to null, then the Nginx default is respected. Default: null.
	//
	TLSVerifyDepth *string `default:"null" json:"tls_verify_depth"`
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Default: `60000`.
	//
	WriteTimeout *int64 `default:"6000" json:"write_timeout"`
}

func (s ServiceRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceRequest) GetCaCertificates() []string {
	if o == nil {
		return nil
	}
	return o.CaCertificates
}

func (o *ServiceRequest) GetClientCertificate() *ClientCertificate {
	if o == nil {
		return nil
	}
	return o.ClientCertificate
}

func (o *ServiceRequest) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *ServiceRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ServiceRequest) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *ServiceRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ServiceRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *ServiceRequest) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ServiceRequest) GetProtocol() *Protocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *ServiceRequest) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *ServiceRequest) GetRetries() *int64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

func (o *ServiceRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ServiceRequest) GetTLSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.TLSVerify
}

func (o *ServiceRequest) GetTLSVerifyDepth() *string {
	if o == nil {
		return nil
	}
	return o.TLSVerifyDepth
}

func (o *ServiceRequest) GetWriteTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.WriteTimeout
}
