// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/utils"
)

type Config struct {
	// Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Allow []string `json:"allow,omitempty"`
	// Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Deny []string `json:"deny,omitempty"`
	// If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
	HideGroupsHeader      *bool `default:"false" json:"hide_groups_header"`
	IncludeConsumerGroups *bool `default:"false" json:"include_consumer_groups"`
}

func (c Config) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Config) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Config) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *Config) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

func (o *Config) GetHideGroupsHeader() *bool {
	if o == nil {
		return nil
	}
	return o.HideGroupsHeader
}

func (o *Config) GetIncludeConsumerGroups() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeConsumerGroups
}

// ACLPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ACLPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Protocols string

const (
	ProtocolsGrpc           Protocols = "grpc"
	ProtocolsGrpcs          Protocols = "grpcs"
	ProtocolsHTTP           Protocols = "http"
	ProtocolsHTTPS          Protocols = "https"
	ProtocolsTCP            Protocols = "tcp"
	ProtocolsTLS            Protocols = "tls"
	ProtocolsTLSPassthrough Protocols = "tls_passthrough"
	ProtocolsUDP            Protocols = "udp"
	ProtocolsWs             Protocols = "ws"
	ProtocolsWss            Protocols = "wss"
)

func (e Protocols) ToPointer() *Protocols {
	return &e
}

func (e *Protocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = Protocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocols: %v", v)
	}
}

// ACLPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type ACLPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ACLPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ACLPlugin struct {
	Config Config `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ACLPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool   `default:"true" json:"enabled"`
	ID      *string `json:"id,omitempty"`
	name    string  `const:"acl" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []Protocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *ACLPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ACLPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (a ACLPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACLPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ACLPlugin) GetConfig() Config {
	if o == nil {
		return Config{}
	}
	return o.Config
}

func (o *ACLPlugin) GetConsumer() *ACLPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *ACLPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ACLPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ACLPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ACLPlugin) GetName() string {
	return "acl"
}

func (o *ACLPlugin) GetProtocols() []Protocols {
	if o == nil {
		return []Protocols{}
	}
	return o.Protocols
}

func (o *ACLPlugin) GetRoute() *ACLPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ACLPlugin) GetService() *ACLPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *ACLPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
