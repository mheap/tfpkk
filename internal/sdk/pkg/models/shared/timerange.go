// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TimeRangeType string

const (
	TimeRangeTypeRelativeTimeRange TimeRangeType = "RelativeTimeRange"
	TimeRangeTypeAbsoluteTimeRange TimeRangeType = "AbsoluteTimeRange"
)

type TimeRange struct {
	RelativeTimeRange *RelativeTimeRange
	AbsoluteTimeRange *AbsoluteTimeRange

	Type TimeRangeType
}

func CreateTimeRangeRelativeTimeRange(relativeTimeRange RelativeTimeRange) TimeRange {
	typ := TimeRangeTypeRelativeTimeRange

	return TimeRange{
		RelativeTimeRange: &relativeTimeRange,
		Type:              typ,
	}
}

func CreateTimeRangeAbsoluteTimeRange(absoluteTimeRange AbsoluteTimeRange) TimeRange {
	typ := TimeRangeTypeAbsoluteTimeRange

	return TimeRange{
		AbsoluteTimeRange: &absoluteTimeRange,
		Type:              typ,
	}
}

func (u *TimeRange) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	relativeTimeRange := new(RelativeTimeRange)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&relativeTimeRange); err == nil {
		u.RelativeTimeRange = relativeTimeRange
		u.Type = TimeRangeTypeRelativeTimeRange
		return nil
	}

	absoluteTimeRange := new(AbsoluteTimeRange)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&absoluteTimeRange); err == nil {
		u.AbsoluteTimeRange = absoluteTimeRange
		u.Type = TimeRangeTypeAbsoluteTimeRange
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TimeRange) MarshalJSON() ([]byte, error) {
	if u.RelativeTimeRange != nil {
		return json.Marshal(u.RelativeTimeRange)
	}

	if u.AbsoluteTimeRange != nil {
		return json.Marshal(u.AbsoluteTimeRange)
	}

	return nil, nil
}
