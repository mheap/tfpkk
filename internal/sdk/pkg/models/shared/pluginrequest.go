// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/utils"
)

// Config - The configuration properties for the Plugin
type Config struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

func (o *Config) GetHour() *int64 {
	if o == nil {
		return nil
	}
	return o.Hour
}

func (o *Config) GetMinute() *int64 {
	if o == nil {
		return nil
	}
	return o.Minute
}

type Protocols string

const (
	ProtocolsHTTP  Protocols = "http"
	ProtocolsGrpc  Protocols = "grpc"
	ProtocolsGrpcs Protocols = "grpcs"
	ProtocolsTLS   Protocols = "tls"
	ProtocolsTCP   Protocols = "tcp"
)

func (e Protocols) ToPointer() *Protocols {
	return &e
}

func (e *Protocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = Protocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocols: %v", v)
	}
}

// PluginRequestRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
type PluginRequestRoute struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

func (o *PluginRequestRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Service - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
type Service struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

func (o *Service) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type PluginRequest struct {
	// The configuration properties for the Plugin
	Config *Config `json:"config,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool `default:"true" json:"enabled"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin thatâ€™s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []Protocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *PluginRequestRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *Service `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

func (p PluginRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PluginRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PluginRequest) GetConfig() *Config {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *PluginRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PluginRequest) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *PluginRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PluginRequest) GetProtocols() []Protocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PluginRequest) GetRoute() *PluginRequestRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *PluginRequest) GetService() *Service {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *PluginRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
