// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type InvalidParametersType string

const (
	InvalidParametersTypeInvalidParameterChoiceItem    InvalidParametersType = "InvalidParameterChoiceItem"
	InvalidParametersTypeInvalidParameterDependentItem InvalidParametersType = "InvalidParameterDependentItem"
)

type InvalidParameters struct {
	InvalidParameterChoiceItem    *InvalidParameterChoiceItem
	InvalidParameterDependentItem *InvalidParameterDependentItem

	Type InvalidParametersType
}

func CreateInvalidParametersInvalidParameterChoiceItem(invalidParameterChoiceItem InvalidParameterChoiceItem) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterChoiceItem

	return InvalidParameters{
		InvalidParameterChoiceItem: &invalidParameterChoiceItem,
		Type:                       typ,
	}
}

func CreateInvalidParametersInvalidParameterDependentItem(invalidParameterDependentItem InvalidParameterDependentItem) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterDependentItem

	return InvalidParameters{
		InvalidParameterDependentItem: &invalidParameterDependentItem,
		Type:                          typ,
	}
}

func (u *InvalidParameters) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	invalidParameterChoiceItem := new(InvalidParameterChoiceItem)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invalidParameterChoiceItem); err == nil {
		u.InvalidParameterChoiceItem = invalidParameterChoiceItem
		u.Type = InvalidParametersTypeInvalidParameterChoiceItem
		return nil
	}

	invalidParameterDependentItem := new(InvalidParameterDependentItem)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invalidParameterDependentItem); err == nil {
		u.InvalidParameterDependentItem = invalidParameterDependentItem
		u.Type = InvalidParametersTypeInvalidParameterDependentItem
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InvalidParameters) MarshalJSON() ([]byte, error) {
	if u.InvalidParameterChoiceItem != nil {
		return json.Marshal(u.InvalidParameterChoiceItem)
	}

	if u.InvalidParameterDependentItem != nil {
		return json.Marshal(u.InvalidParameterDependentItem)
	}

	return nil, nil
}
