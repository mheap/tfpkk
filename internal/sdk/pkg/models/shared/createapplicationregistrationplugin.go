// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/utils"
)

type CreateApplicationRegistrationPluginConfig struct {
	// If enabled, all new Service Contracts requests are automatically approved.
	AutoApprove *bool `default:"false" json:"auto_approve"`
	// Unique description displayed in information about a Service in the Developer Portal.
	Description *string `json:"description,omitempty"`
	// Unique display name used for a Service in the Developer Portal.
	DisplayName *string `json:"display_name,omitempty"`
	// Displays the **Issuer URL** in the **Service Details** dialog.
	ShowIssuer *bool `default:"false" json:"show_issuer"`
}

func (c CreateApplicationRegistrationPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateApplicationRegistrationPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateApplicationRegistrationPluginConfig) GetAutoApprove() *bool {
	if o == nil {
		return nil
	}
	return o.AutoApprove
}

func (o *CreateApplicationRegistrationPluginConfig) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateApplicationRegistrationPluginConfig) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateApplicationRegistrationPluginConfig) GetShowIssuer() *bool {
	if o == nil {
		return nil
	}
	return o.ShowIssuer
}

// CreateApplicationRegistrationPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateApplicationRegistrationPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateApplicationRegistrationPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateApplicationRegistrationPluginProtocols string

const (
	CreateApplicationRegistrationPluginProtocolsGrpc           CreateApplicationRegistrationPluginProtocols = "grpc"
	CreateApplicationRegistrationPluginProtocolsGrpcs          CreateApplicationRegistrationPluginProtocols = "grpcs"
	CreateApplicationRegistrationPluginProtocolsHTTP           CreateApplicationRegistrationPluginProtocols = "http"
	CreateApplicationRegistrationPluginProtocolsHTTPS          CreateApplicationRegistrationPluginProtocols = "https"
	CreateApplicationRegistrationPluginProtocolsTCP            CreateApplicationRegistrationPluginProtocols = "tcp"
	CreateApplicationRegistrationPluginProtocolsTLS            CreateApplicationRegistrationPluginProtocols = "tls"
	CreateApplicationRegistrationPluginProtocolsTLSPassthrough CreateApplicationRegistrationPluginProtocols = "tls_passthrough"
	CreateApplicationRegistrationPluginProtocolsUDP            CreateApplicationRegistrationPluginProtocols = "udp"
	CreateApplicationRegistrationPluginProtocolsWs             CreateApplicationRegistrationPluginProtocols = "ws"
	CreateApplicationRegistrationPluginProtocolsWss            CreateApplicationRegistrationPluginProtocols = "wss"
)

func (e CreateApplicationRegistrationPluginProtocols) ToPointer() *CreateApplicationRegistrationPluginProtocols {
	return &e
}

func (e *CreateApplicationRegistrationPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateApplicationRegistrationPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationRegistrationPluginProtocols: %v", v)
	}
}

// CreateApplicationRegistrationPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateApplicationRegistrationPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateApplicationRegistrationPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateApplicationRegistrationPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateApplicationRegistrationPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateApplicationRegistrationPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateApplicationRegistrationPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type CreateApplicationRegistrationPlugin struct {
	Config CreateApplicationRegistrationPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *CreateApplicationRegistrationPluginConsumer `json:"consumer,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"application-registration" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateApplicationRegistrationPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateApplicationRegistrationPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateApplicationRegistrationPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (c CreateApplicationRegistrationPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateApplicationRegistrationPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateApplicationRegistrationPlugin) GetConfig() CreateApplicationRegistrationPluginConfig {
	if o == nil {
		return CreateApplicationRegistrationPluginConfig{}
	}
	return o.Config
}

func (o *CreateApplicationRegistrationPlugin) GetConsumer() *CreateApplicationRegistrationPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateApplicationRegistrationPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateApplicationRegistrationPlugin) GetName() string {
	return "application-registration"
}

func (o *CreateApplicationRegistrationPlugin) GetProtocols() []CreateApplicationRegistrationPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateApplicationRegistrationPlugin) GetRoute() *CreateApplicationRegistrationPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateApplicationRegistrationPlugin) GetService() *CreateApplicationRegistrationPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *CreateApplicationRegistrationPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
