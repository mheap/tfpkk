// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

type ListPortalRoles200ApplicationJSONServicesName string

const (
	ListPortalRoles200ApplicationJSONServicesNameServices ListPortalRoles200ApplicationJSONServicesName = "Services"
)

func (e ListPortalRoles200ApplicationJSONServicesName) ToPointer() *ListPortalRoles200ApplicationJSONServicesName {
	return &e
}

func (e *ListPortalRoles200ApplicationJSONServicesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Services":
		*e = ListPortalRoles200ApplicationJSONServicesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortalRoles200ApplicationJSONServicesName: %v", v)
	}
}

type ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription string

const (
	ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescriptionAPIConsumersCanMakeCallsToTheGivenService ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription = "API Consumers can make calls to the given service"
)

func (e ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription) ToPointer() *ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription {
	return &e
}

func (e *ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumers can make calls to the given service":
		*e = ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription: %v", v)
	}
}

type ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName string

const (
	ListPortalRoles200ApplicationJSONServicesRolesApiconsumerNameAPIConsumer ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName = "API Consumer"
)

func (e ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName) ToPointer() *ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName {
	return &e
}

func (e *ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumer":
		*e = ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName: %v", v)
	}
}

type ListPortalRoles200ApplicationJSONServicesRolesApiconsumer struct {
	Description ListPortalRoles200ApplicationJSONServicesRolesApiconsumerDescription `json:"description"`
	Name        ListPortalRoles200ApplicationJSONServicesRolesApiconsumerName        `json:"name"`
}

type ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription string

const (
	ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription = "API Viewers have read-only access to the documentation of a service in a portal"
)

func (e ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription) ToPointer() *ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription {
	return &e
}

func (e *ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewers have read-only access to the documentation of a service in a portal":
		*e = ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription: %v", v)
	}
}

type ListPortalRoles200ApplicationJSONServicesRolesApiviewerName string

const (
	ListPortalRoles200ApplicationJSONServicesRolesApiviewerNameAPIViewer ListPortalRoles200ApplicationJSONServicesRolesApiviewerName = "API Viewer"
)

func (e ListPortalRoles200ApplicationJSONServicesRolesApiviewerName) ToPointer() *ListPortalRoles200ApplicationJSONServicesRolesApiviewerName {
	return &e
}

func (e *ListPortalRoles200ApplicationJSONServicesRolesApiviewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewer":
		*e = ListPortalRoles200ApplicationJSONServicesRolesApiviewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortalRoles200ApplicationJSONServicesRolesApiviewerName: %v", v)
	}
}

type ListPortalRoles200ApplicationJSONServicesRolesApiviewer struct {
	Description ListPortalRoles200ApplicationJSONServicesRolesApiviewerDescription `json:"description"`
	Name        ListPortalRoles200ApplicationJSONServicesRolesApiviewerName        `json:"name"`
}

type ListPortalRoles200ApplicationJSONServicesRoles struct {
	Apiconsumer ListPortalRoles200ApplicationJSONServicesRolesApiconsumer `json:"apiconsumer"`
	Apiviewer   ListPortalRoles200ApplicationJSONServicesRolesApiviewer   `json:"apiviewer"`
}

type ListPortalRoles200ApplicationJSONServices struct {
	Name  ListPortalRoles200ApplicationJSONServicesName  `json:"name"`
	Roles ListPortalRoles200ApplicationJSONServicesRoles `json:"roles"`
}

// ListPortalRoles200ApplicationJSON - A set of roles available in portals.
type ListPortalRoles200ApplicationJSON struct {
	Services ListPortalRoles200ApplicationJSONServices `json:"services"`
}

type ListPortalRolesResponse struct {
	ContentType string
	// Forbidden
	ForbiddenError *shared.ForbiddenError
	StatusCode     int
	RawResponse    *http.Response
	// Unauthorized
	UnauthorizedError *shared.UnauthorizedError
	// A set of roles available in portals.
	ListPortalRoles200ApplicationJSONObject *ListPortalRoles200ApplicationJSON
}
