// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"net/http"
)

// UpsertKeyRequestBodyPem - A keypair in PEM format.
type UpsertKeyRequestBodyPem struct {
	PrivateKey *string `json:"private_key,omitempty"`
	PublicKey  *string `json:"public_key,omitempty"`
}

// UpsertKeyRequestBodySet - The id (an UUID) of the key-set with which to associate the key .With form-encoded, the notation is `set.id=<set id>` or `set.name=<set name>`. With JSON, use `“set:{id:<set id>}` or `set:{name:<set name>}.`
type UpsertKeyRequestBodySet struct {
	// 46CA83EE-671C-11ED-BFAB-2FE47512C77A
	ID *string `json:"id,omitempty"`
}

type UpsertKeyRequestBody struct {
	// A JSON Web Key represented as a string.
	Jwk *string `json:"jwk,omitempty"`
	// A unique identifier for a key.
	//
	Kid string `json:"kid"`
	// The name to associate with the given keys.
	//
	Name *string `json:"name,omitempty"`
	// A keypair in PEM format.
	//
	Pem *UpsertKeyRequestBodyPem `json:"pem,omitempty"`
	// The id (an UUID) of the key-set with which to associate the key .With form-encoded, the notation is `set.id=<set id>` or `set.name=<set name>`. With JSON, use `“set:{id:<set id>}` or `set:{name:<set name>}.`
	Set *UpsertKeyRequestBodySet `json:"set,omitempty"`
	// An optional set of strings associated with the Key for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type UpsertKeyRequest struct {
	RequestBody *UpsertKeyRequestBody `request:"mediaType=application/json"`
	// The unique identifier or the name of the Key to retrieve.
	KeyIDOrName string `pathParam:"style=simple,explode=false,name=key_id_or_name"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
}

// UpsertKey400ApplicationJSON - Invalid Key
type UpsertKey400ApplicationJSON struct {
}

type UpsertKeyResponse struct {
	ContentType string
	// Successfully upserted Key
	Key         *shared.Key
	StatusCode  int
	RawResponse *http.Response
	// Invalid Key
	UpsertKey400ApplicationJSONObject *UpsertKey400ApplicationJSON
}
