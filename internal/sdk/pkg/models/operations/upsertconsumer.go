// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect/internal/sdk/pkg/models/shared"
	"net/http"
)

type UpsertConsumerRequest struct {
	// Consumer request body
	ConsumerRequest *shared.ConsumerRequest `request:"mediaType=application/json"`
	// The unique identifier or the username of the Consumer to retrieve.
	ConsumerID string `pathParam:"style=simple,explode=false,name=consumer_id"`
	// The UUID of your control plane. This variable is available in the Konnect manager
	ControlPlaneID string `pathParam:"style=simple,explode=false,name=controlPlaneId"`
}

func (o *UpsertConsumerRequest) GetConsumerRequest() *shared.ConsumerRequest {
	if o == nil {
		return nil
	}
	return o.ConsumerRequest
}

func (o *UpsertConsumerRequest) GetConsumerID() string {
	if o == nil {
		return ""
	}
	return o.ConsumerID
}

func (o *UpsertConsumerRequest) GetControlPlaneID() string {
	if o == nil {
		return ""
	}
	return o.ControlPlaneID
}

type Data struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database.
	CustomID *string `json:"custom_id,omitempty"`
	// The unique identifier or the name attribute of the consumer.
	ID *string `json:"id,omitempty"`
	// An optional set of strings associated with the Consumer for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was created.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The unique username of the consumer. You must send either this field or` custom_i`d with the request.
	Username *string `json:"username,omitempty"`
}

func (o *Data) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Data) GetCustomID() *string {
	if o == nil {
		return nil
	}
	return o.CustomID
}

func (o *Data) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Data) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Data) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Data) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// UpsertConsumerResponseBody - The consumer object response body
type UpsertConsumerResponseBody struct {
	Data []Data `json:"data,omitempty"`
	// Pagination information
	Next *string `json:"next,omitempty"`
}

func (o *UpsertConsumerResponseBody) GetData() []Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *UpsertConsumerResponseBody) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

type UpsertConsumerResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The consumer object response body
	Object *UpsertConsumerResponseBody
}

func (o *UpsertConsumerResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpsertConsumerResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpsertConsumerResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpsertConsumerResponse) GetObject() *UpsertConsumerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
