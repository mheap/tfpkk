// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

// CreatePluginRequestBodyConfig - The configuration properties for the Plugin
type CreatePluginRequestBodyConfig struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

type CreatePluginRequestBodyProtocols string

const (
	CreatePluginRequestBodyProtocolsHTTP  CreatePluginRequestBodyProtocols = "http"
	CreatePluginRequestBodyProtocolsGrpc  CreatePluginRequestBodyProtocols = "grpc"
	CreatePluginRequestBodyProtocolsGrpcs CreatePluginRequestBodyProtocols = "grpcs"
	CreatePluginRequestBodyProtocolsTLS   CreatePluginRequestBodyProtocols = "tls"
	CreatePluginRequestBodyProtocolsTCP   CreatePluginRequestBodyProtocols = "tcp"
)

func (e CreatePluginRequestBodyProtocols) ToPointer() *CreatePluginRequestBodyProtocols {
	return &e
}

func (e *CreatePluginRequestBodyProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = CreatePluginRequestBodyProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePluginRequestBodyProtocols: %v", v)
	}
}

// CreatePluginRequestBodyRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
type CreatePluginRequestBodyRoute struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// CreatePluginRequestBodyService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
type CreatePluginRequestBodyService struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// CreatePluginRequestBody - Plugin request body
type CreatePluginRequestBody struct {
	// The configuration properties for the Plugin
	Config *CreatePluginRequestBodyConfig `json:"config,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool `json:"enabled,omitempty"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin thatâ€™s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []CreatePluginRequestBodyProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *CreatePluginRequestBodyRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *CreatePluginRequestBodyService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type CreatePluginRequest struct {
	// Plugin request body
	RequestBody *CreatePluginRequestBody `request:"mediaType=application/json"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
}

// CreatePlugin400ApplicationJSON - Invalid Plugin
type CreatePlugin400ApplicationJSON struct {
}

type CreatePluginResponse struct {
	ContentType string
	// Successfully created Plugin
	Plugin      *shared.Plugin
	StatusCode  int
	RawResponse *http.Response
	// Invalid Plugin
	CreatePlugin400ApplicationJSONObject *CreatePlugin400ApplicationJSON
}
