// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

type GetPredefinedRoles200ApplicationJSONAuditLogsName string

const (
	GetPredefinedRoles200ApplicationJSONAuditLogsNameAuditLogs GetPredefinedRoles200ApplicationJSONAuditLogsName = "Audit Logs"
)

func (e GetPredefinedRoles200ApplicationJSONAuditLogsName) ToPointer() *GetPredefinedRoles200ApplicationJSONAuditLogsName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONAuditLogsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Audit Logs":
		*e = GetPredefinedRoles200ApplicationJSONAuditLogsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONAuditLogsName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription = "This role grants full write access to the Audit log configuration."
)

func (e GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Audit log configuration.":
		*e = GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName string

const (
	GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminNameAdmin GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName = "Admin"
)

func (e GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONAuditLogsRoles struct {
	Admin *GetPredefinedRoles200ApplicationJSONAuditLogsRolesAdmin `json:"admin,omitempty"`
}

type GetPredefinedRoles200ApplicationJSONAuditLogs struct {
	Name  GetPredefinedRoles200ApplicationJSONAuditLogsName  `json:"name"`
	Roles GetPredefinedRoles200ApplicationJSONAuditLogsRoles `json:"roles"`
}

type GetPredefinedRoles200ApplicationJSONIdentityName string

const (
	GetPredefinedRoles200ApplicationJSONIdentityNameIdentity GetPredefinedRoles200ApplicationJSONIdentityName = "Identity"
)

func (e GetPredefinedRoles200ApplicationJSONIdentityName) ToPointer() *GetPredefinedRoles200ApplicationJSONIdentityName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONIdentityName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Identity":
		*e = GetPredefinedRoles200ApplicationJSONIdentityName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONIdentityName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription = "This role grants full write access to the Identity configuration."
)

func (e GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Identity configuration.":
		*e = GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName string

const (
	GetPredefinedRoles200ApplicationJSONIdentityRolesAdminNameAdmin GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName = "Admin"
)

func (e GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONIdentityRolesAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONIdentityRolesAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONIdentityRolesAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONIdentityRoles struct {
	Admin *GetPredefinedRoles200ApplicationJSONIdentityRolesAdmin `json:"admin,omitempty"`
}

type GetPredefinedRoles200ApplicationJSONIdentity struct {
	Name  GetPredefinedRoles200ApplicationJSONIdentityName  `json:"name"`
	Roles GetPredefinedRoles200ApplicationJSONIdentityRoles `json:"roles"`
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesName string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesNameMeshControlPlane GetPredefinedRoles200ApplicationJSONMeshControlPlanesName = "Mesh Control Plane"
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesName) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh Control Plane":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription = "This role grants full write access to the related to Mesh control planes."
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the related to Mesh control planes.":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminNameAdmin GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName = "Admin"
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription = "This role grants access to create new Mesh control planes."
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to create new Mesh control planes.":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorNameCreator GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName = "Creator"
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreator struct {
	Description GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreatorName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription = "This role grants access to read-only permissions to Mesh control planes."
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to read-only permissions to Mesh control planes.":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName string

const (
	GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerNameViewer GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName = "Viewer"
)

func (e GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName) ToPointer() *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewer struct {
	Description GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanesRoles struct {
	Admin   *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesAdmin   `json:"admin,omitempty"`
	Creator *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesCreator `json:"creator,omitempty"`
	Viewer  *GetPredefinedRoles200ApplicationJSONMeshControlPlanesRolesViewer  `json:"viewer,omitempty"`
}

type GetPredefinedRoles200ApplicationJSONMeshControlPlanes struct {
	Name  GetPredefinedRoles200ApplicationJSONMeshControlPlanesName  `json:"name"`
	Roles GetPredefinedRoles200ApplicationJSONMeshControlPlanesRoles `json:"roles"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsNameRuntimeGroups GetPredefinedRoles200ApplicationJSONRuntimeGroupsName = "Runtime Groups"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Runtime Groups":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinARuntimeGroup GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription = "This role grants full write access to all entities within a runtime group."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to all entities within a runtime group.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminNameAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName = "Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription = "This role grants full write access to administer certificates."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer certificates.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminNameCertificateAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName = "Certificate Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Certificate Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription = "This role grants full write access to administer consumers."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer consumers.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminNameConsumerAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName = "Consumer Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Consumer Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescriptionCreatesANewRuntimeGroupInAnOrganizationTheCreatorBecomesTheOwnerOfTheRuntimeGroupTheyCreate GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription = "Creates a new Runtime Group in an organization. The creator becomes the owner of the Runtime Group they create."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creates a new Runtime Group in an organization. The creator becomes the owner of the Runtime Group they create.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorNameCreator GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName = "Creator"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreator struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreatorName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription = "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerNameDeployer GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName = "Deployer"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployer struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription = "This role grants full write access to administer gateway services."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer gateway services.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminNameGatewayServiceAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName = "Gateway Service Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Gateway Service Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription = "This role grants full write access to administer plugins."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer plugins.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminNamePluginAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName = "Plugin Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugin Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription = "This role grants full write access to administer routes."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer routes.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminNameRouteAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName = "Route Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription = "This role grants full write access to administer SNIs."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer SNIs.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminNameSniAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName = "SNI Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNI Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription = "This role grants full write access to administer upstreams."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer upstreams.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminNameUpstreamAdmin GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName = "Upstream Admin"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Upstream Admin":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinARuntimeGroup GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription = "This role grants read only access to all entities within a runtime group."
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants read only access to all entities within a runtime group.":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName string

const (
	GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerNameViewer GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName = "Viewer"
)

func (e GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName) ToPointer() *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewer struct {
	Description GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroupsRoles struct {
	Admin               *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesAdmin               `json:"admin,omitempty"`
	CertificateAdmin    *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCertificateAdmin    `json:"certificate_admin,omitempty"`
	ConsumerAdmin       *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesConsumerAdmin       `json:"consumer_admin,omitempty"`
	Creator             *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesCreator             `json:"creator,omitempty"`
	Deployer            *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesDeployer            `json:"deployer,omitempty"`
	GatewayServiceAdmin *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesGatewayServiceAdmin `json:"gateway_service_admin,omitempty"`
	PluginAdmin         *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesPluginAdmin         `json:"plugin_admin,omitempty"`
	RouteAdmin          *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesRouteAdmin          `json:"route_admin,omitempty"`
	SniAdmin            *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesSniAdmin            `json:"sni_admin,omitempty"`
	UpstreamAdmin       *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesUpstreamAdmin       `json:"upstream_admin,omitempty"`
	Viewer              *GetPredefinedRoles200ApplicationJSONRuntimeGroupsRolesViewer              `json:"viewer,omitempty"`
}

type GetPredefinedRoles200ApplicationJSONRuntimeGroups struct {
	Name  GetPredefinedRoles200ApplicationJSONRuntimeGroupsName  `json:"name"`
	Roles GetPredefinedRoles200ApplicationJSONRuntimeGroupsRoles `json:"roles"`
}

type GetPredefinedRoles200ApplicationJSONServicesName string

const (
	GetPredefinedRoles200ApplicationJSONServicesNameServices GetPredefinedRoles200ApplicationJSONServicesName = "Services"
)

func (e GetPredefinedRoles200ApplicationJSONServicesName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Services":
		*e = GetPredefinedRoles200ApplicationJSONServicesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescriptionAdminOfAnExistingServiceTheAdminsHaveAllWriteAccessPermissionsRelatedToAServiceServiceVersionServicePackageEtc GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription = "Admin of an existing Service. The admins have all write access permissions related to a Service, service version, service package etc."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin of an existing Service. The admins have all write access permissions related to a Service, service version, service package etc.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesAdminName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesAdminNameAdmin GetPredefinedRoles200ApplicationJSONServicesRolesAdminName = "Admin"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAService GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription = "This role grants permission to enable and disable application registration on a service."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to enable and disable application registration on a service.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationNameApplicationRegistration GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName = "Application Registration"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Application Registration":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistration struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistrationName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescriptionThisAccessIsRequiredToCreateAServiceInAdditionTheCreatorsAreGrantedAdminAccessToTheServiceTheyCreateThisAccessIsNotForCreatingSubEntitiesSuchAsServiceVersionsImplementationsAPISpecsEtc GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription = "This access is required to create a service. In addition the creators are granted Admin access to the service they create. This access is not for creating sub-entities such as service versions, implementations, API specs etc."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This access is required to create a service. In addition the creators are granted Admin access to the service they create. This access is not for creating sub-entities such as service versions, implementations, API specs etc.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesCreatorNameCreator GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName = "Creator"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesCreator struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesCreatorDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesCreatorName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescriptionThisRoleGrantsPermissionToDeployAndRemoveAServiceFromARuntimeGroup GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription = "This role grants permission to deploy and remove a service from a runtime group."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to deploy and remove a service from a runtime group.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesDeployerNameDeployer GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName = "Deployer"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesDeployer struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesDeployerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesDeployerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescriptionThisRoleGrantsAllWritePermissionToManageAServiceAndToAdministerPlugins GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription = "This role grants all write permission to manage a service and to administer plugins."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants all write permission to manage a service and to administer plugins.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerNameMaintainer GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName = "Maintainer"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Maintainer":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesMaintainer struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesMaintainerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription = "This role grants full write permission to administer plugins."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write permission to administer plugins.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminNamePluginsAdmin GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName = "Plugins Admin"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugins Admin":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdmin struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdminName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescriptionThisRoleGrantsPermissionToPublishAServiceToOneOrMorePortals GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription = "This role grants permission to publish a service to one or more portals."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to publish a service to one or more portals.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesPublisherNamePublisher GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName = "Publisher"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesPublisher struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesPublisherDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesPublisherName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescriptionViewerHasReadOnlyAccessToAllTheConfigurationsOfAServiceAttributesVersionsReportsVitalsAndPlugins GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription = "Viewer has read-only access to all the configurations of a service, attributes, versions, reports, vitals and plugins."
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer has read-only access to all the configurations of a service, attributes, versions, reports, vitals and plugins.":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesViewerName string

const (
	GetPredefinedRoles200ApplicationJSONServicesRolesViewerNameViewer GetPredefinedRoles200ApplicationJSONServicesRolesViewerName = "Viewer"
)

func (e GetPredefinedRoles200ApplicationJSONServicesRolesViewerName) ToPointer() *GetPredefinedRoles200ApplicationJSONServicesRolesViewerName {
	return &e
}

func (e *GetPredefinedRoles200ApplicationJSONServicesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = GetPredefinedRoles200ApplicationJSONServicesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPredefinedRoles200ApplicationJSONServicesRolesViewerName: %v", v)
	}
}

type GetPredefinedRoles200ApplicationJSONServicesRolesViewer struct {
	Description GetPredefinedRoles200ApplicationJSONServicesRolesViewerDescription `json:"description"`
	Name        GetPredefinedRoles200ApplicationJSONServicesRolesViewerName        `json:"name"`
}

type GetPredefinedRoles200ApplicationJSONServicesRoles struct {
	Admin                   *GetPredefinedRoles200ApplicationJSONServicesRolesAdmin                   `json:"admin,omitempty"`
	ApplicationRegistration *GetPredefinedRoles200ApplicationJSONServicesRolesApplicationRegistration `json:"application_registration,omitempty"`
	Creator                 *GetPredefinedRoles200ApplicationJSONServicesRolesCreator                 `json:"creator,omitempty"`
	Deployer                *GetPredefinedRoles200ApplicationJSONServicesRolesDeployer                `json:"deployer,omitempty"`
	Maintainer              *GetPredefinedRoles200ApplicationJSONServicesRolesMaintainer              `json:"maintainer,omitempty"`
	PluginsAdmin            *GetPredefinedRoles200ApplicationJSONServicesRolesPluginsAdmin            `json:"plugins_admin,omitempty"`
	Publisher               *GetPredefinedRoles200ApplicationJSONServicesRolesPublisher               `json:"publisher,omitempty"`
	Viewer                  *GetPredefinedRoles200ApplicationJSONServicesRolesViewer                  `json:"viewer,omitempty"`
}

type GetPredefinedRoles200ApplicationJSONServices struct {
	Name  GetPredefinedRoles200ApplicationJSONServicesName  `json:"name"`
	Roles GetPredefinedRoles200ApplicationJSONServicesRoles `json:"roles"`
}

// GetPredefinedRoles200ApplicationJSON - The predefined, or system managed, roles.
type GetPredefinedRoles200ApplicationJSON struct {
	AuditLogs         *GetPredefinedRoles200ApplicationJSONAuditLogs         `json:"audit_logs,omitempty"`
	Identity          *GetPredefinedRoles200ApplicationJSONIdentity          `json:"identity,omitempty"`
	MeshControlPlanes *GetPredefinedRoles200ApplicationJSONMeshControlPlanes `json:"mesh_control_planes,omitempty"`
	RuntimeGroups     *GetPredefinedRoles200ApplicationJSONRuntimeGroups     `json:"runtime_groups,omitempty"`
	Services          *GetPredefinedRoles200ApplicationJSONServices          `json:"services,omitempty"`
}

type GetPredefinedRolesResponse struct {
	// Bad Request
	BadRequestError *shared.BadRequestError
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
	// Unauthenticated
	UnauthorizedError *shared.UnauthorizedError
	// The predefined, or system managed, roles.
	GetPredefinedRoles200ApplicationJSONObject *GetPredefinedRoles200ApplicationJSON
}
