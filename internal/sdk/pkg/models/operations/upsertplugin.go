// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

// UpsertPluginRequestBodyConfig - The configuration properties for the Plugin
type UpsertPluginRequestBodyConfig struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

type UpsertPluginRequestBodyProtocols string

const (
	UpsertPluginRequestBodyProtocolsHTTP  UpsertPluginRequestBodyProtocols = "http"
	UpsertPluginRequestBodyProtocolsGrpc  UpsertPluginRequestBodyProtocols = "grpc"
	UpsertPluginRequestBodyProtocolsGrpcs UpsertPluginRequestBodyProtocols = "grpcs"
	UpsertPluginRequestBodyProtocolsTLS   UpsertPluginRequestBodyProtocols = "tls"
	UpsertPluginRequestBodyProtocolsTCP   UpsertPluginRequestBodyProtocols = "tcp"
)

func (e UpsertPluginRequestBodyProtocols) ToPointer() *UpsertPluginRequestBodyProtocols {
	return &e
}

func (e *UpsertPluginRequestBodyProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = UpsertPluginRequestBodyProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPluginRequestBodyProtocols: %v", v)
	}
}

// UpsertPluginRequestBodyRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
type UpsertPluginRequestBodyRoute struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// UpsertPluginRequestBodyService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
type UpsertPluginRequestBodyService struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// UpsertPluginRequestBody - Plugin request body
type UpsertPluginRequestBody struct {
	// The configuration properties for the Plugin
	Config *UpsertPluginRequestBodyConfig `json:"config,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool `json:"enabled,omitempty"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin thatâ€™s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []UpsertPluginRequestBodyProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *UpsertPluginRequestBodyRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *UpsertPluginRequestBodyService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type UpsertPluginRequest struct {
	// Plugin request body
	RequestBody *UpsertPluginRequestBody `request:"mediaType=application/json"`
	// The unique identifier of the Plugin to create or update.
	PluginIDOrInstanceName string `pathParam:"style=simple,explode=false,name=plugin_id_or_instance_name"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
}

// UpsertPlugin400ApplicationJSON - Invalid Plugin
type UpsertPlugin400ApplicationJSON struct {
}

type UpsertPluginResponse struct {
	ContentType string
	// Successfully upserted Plugin
	Plugin      *shared.Plugin
	StatusCode  int
	RawResponse *http.Response
	// Invalid Plugin
	UpsertPlugin400ApplicationJSONObject *UpsertPlugin400ApplicationJSON
}
