// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

// TeamsAssignRoleRequestBodyEntityRegion - The region of the team.
type TeamsAssignRoleRequestBodyEntityRegion string

const (
	TeamsAssignRoleRequestBodyEntityRegionUs       TeamsAssignRoleRequestBodyEntityRegion = "us"
	TeamsAssignRoleRequestBodyEntityRegionEu       TeamsAssignRoleRequestBodyEntityRegion = "eu"
	TeamsAssignRoleRequestBodyEntityRegionWildcard TeamsAssignRoleRequestBodyEntityRegion = "*"
)

func (e TeamsAssignRoleRequestBodyEntityRegion) ToPointer() *TeamsAssignRoleRequestBodyEntityRegion {
	return &e
}

func (e *TeamsAssignRoleRequestBodyEntityRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us":
		fallthrough
	case "eu":
		fallthrough
	case "*":
		*e = TeamsAssignRoleRequestBodyEntityRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAssignRoleRequestBodyEntityRegion: %v", v)
	}
}

// TeamsAssignRoleRequestBody - An assigned role is a role that has been assigned to a user or team.
type TeamsAssignRoleRequestBody struct {
	// The ID of the entity.
	EntityID *string `json:"entity_id,omitempty"`
	// The region of the team.
	EntityRegion *TeamsAssignRoleRequestBodyEntityRegion `json:"entity_region,omitempty"`
	// The type of entity.
	EntityTypeName *string `json:"entity_type_name,omitempty"`
	// The desired role.
	RoleName *string `json:"role_name,omitempty"`
}

type TeamsAssignRoleRequest struct {
	// The request schema for assigning a role.
	RequestBody *TeamsAssignRoleRequestBody `request:"mediaType=application/json"`
	// The team ID
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
}

type TeamsAssignRoleResponse struct {
	// A get action response of a single assigned role.
	AssignedRole *shared.AssignedRole
	// Bad Request
	BadRequestError *shared.BadRequestError
	// Conflict
	ConflictError *shared.ConflictError
	ContentType   string
	// Permission denied
	ForbiddenError *shared.ForbiddenError
	// Not Found
	NotFoundError *shared.NotFoundError
	StatusCode    int
	RawResponse   *http.Response
	// Unauthenticated
	UnauthorizedError *shared.UnauthorizedError
}
