// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// UpdateAuditLogWebhookRequestBodyLogFormat - The output format of each log message.
type UpdateAuditLogWebhookRequestBodyLogFormat string

const (
	UpdateAuditLogWebhookRequestBodyLogFormatCef  UpdateAuditLogWebhookRequestBodyLogFormat = "cef"
	UpdateAuditLogWebhookRequestBodyLogFormatJSON UpdateAuditLogWebhookRequestBodyLogFormat = "json"
)

func (e UpdateAuditLogWebhookRequestBodyLogFormat) ToPointer() *UpdateAuditLogWebhookRequestBodyLogFormat {
	return &e
}

func (e *UpdateAuditLogWebhookRequestBodyLogFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cef":
		fallthrough
	case "json":
		*e = UpdateAuditLogWebhookRequestBodyLogFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAuditLogWebhookRequestBodyLogFormat: %v", v)
	}
}

// UpdateAuditLogWebhookRequestBody - The request schema to modify an audit log webhook.
type UpdateAuditLogWebhookRequestBody struct {
	// The value to include in the `Authorization` header when sending audit logs to the webhook.
	Authorization *string `json:"authorization,omitempty"`
	// Indicates if the data should be sent to the webhook.
	Enabled *bool `json:"enabled,omitempty"`
	// The endpoint that will receive audit log messages.
	Endpoint *string `json:"endpoint,omitempty"`
	// The output format of each log message.
	LogFormat *UpdateAuditLogWebhookRequestBodyLogFormat `json:"log_format,omitempty"`
}

// UpdateAuditLogWebhook200ApplicationJSONLogFormat - The output format of each log messages.
type UpdateAuditLogWebhook200ApplicationJSONLogFormat string

const (
	UpdateAuditLogWebhook200ApplicationJSONLogFormatCef  UpdateAuditLogWebhook200ApplicationJSONLogFormat = "cef"
	UpdateAuditLogWebhook200ApplicationJSONLogFormatJSON UpdateAuditLogWebhook200ApplicationJSONLogFormat = "json"
)

func (e UpdateAuditLogWebhook200ApplicationJSONLogFormat) ToPointer() *UpdateAuditLogWebhook200ApplicationJSONLogFormat {
	return &e
}

func (e *UpdateAuditLogWebhook200ApplicationJSONLogFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cef":
		fallthrough
	case "json":
		*e = UpdateAuditLogWebhook200ApplicationJSONLogFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAuditLogWebhook200ApplicationJSONLogFormat: %v", v)
	}
}

// UpdateAuditLogWebhook200ApplicationJSON - Get response for audit log webhook
type UpdateAuditLogWebhook200ApplicationJSON struct {
	// Indicates whether audit data should be sent to the webhook.
	Enabled *bool `json:"enabled,omitempty"`
	// The endpoint that will receive audit log messages.
	Endpoint *string `json:"endpoint,omitempty"`
	// The output format of each log messages.
	LogFormat *UpdateAuditLogWebhook200ApplicationJSONLogFormat `json:"log_format,omitempty"`
	// Timestamp when this webhook was last updated. Initial value is 0001-01-01T00:00:0Z.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type UpdateAuditLogWebhookResponse struct {
	// Bad Request
	BadRequestError *shared.BadRequestError
	ContentType     string
	// Forbidden
	ForbiddenError *shared.ForbiddenError
	StatusCode     int
	RawResponse    *http.Response
	// Unauthorized
	UnauthorizedError *shared.UnauthorizedError
	// Get response for audit log webhook
	UpdateAuditLogWebhook200ApplicationJSONObject *UpdateAuditLogWebhook200ApplicationJSON
}
