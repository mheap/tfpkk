// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Konnect/internal/sdk/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateUpstreamRequestBodyAlgorithm - Which load balancing algorithm to use. Accepted values are: `consistent-hashing`, `least-connections`,` round-robin`. Default: `round-robin`.
type CreateUpstreamRequestBodyAlgorithm string

const (
	CreateUpstreamRequestBodyAlgorithmConsistentHashing CreateUpstreamRequestBodyAlgorithm = "consistent-hashing"
	CreateUpstreamRequestBodyAlgorithmLeastConnections  CreateUpstreamRequestBodyAlgorithm = "least-connections"
	CreateUpstreamRequestBodyAlgorithmRoundRobin        CreateUpstreamRequestBodyAlgorithm = "round-robin"
)

func (e CreateUpstreamRequestBodyAlgorithm) ToPointer() *CreateUpstreamRequestBodyAlgorithm {
	return &e
}

func (e *CreateUpstreamRequestBodyAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consistent-hashing":
		fallthrough
	case "least-connections":
		fallthrough
	case "round-robin":
		*e = CreateUpstreamRequestBodyAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyAlgorithm: %v", v)
	}
}

// CreateUpstreamRequestBodyClientCertificate - If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
type CreateUpstreamRequestBodyClientCertificate struct {
	ID *string `json:"id,omitempty"`
}

// CreateUpstreamRequestBodyHashFallback - What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no Consumer identified). Not available if hash_on is set to cookie.
type CreateUpstreamRequestBodyHashFallback string

const (
	CreateUpstreamRequestBodyHashFallbackNone       CreateUpstreamRequestBodyHashFallback = "none"
	CreateUpstreamRequestBodyHashFallbackConsumer   CreateUpstreamRequestBodyHashFallback = "consumer"
	CreateUpstreamRequestBodyHashFallbackIP         CreateUpstreamRequestBodyHashFallback = "ip"
	CreateUpstreamRequestBodyHashFallbackCookie     CreateUpstreamRequestBodyHashFallback = "cookie"
	CreateUpstreamRequestBodyHashFallbackURICapture CreateUpstreamRequestBodyHashFallback = "uri_capture"
	CreateUpstreamRequestBodyHashFallbackPath       CreateUpstreamRequestBodyHashFallback = "path"
	CreateUpstreamRequestBodyHashFallbackQueryArg   CreateUpstreamRequestBodyHashFallback = "query_arg"
)

func (e CreateUpstreamRequestBodyHashFallback) ToPointer() *CreateUpstreamRequestBodyHashFallback {
	return &e
}

func (e *CreateUpstreamRequestBodyHashFallback) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "consumer":
		fallthrough
	case "ip":
		fallthrough
	case "cookie":
		fallthrough
	case "uri_capture":
		fallthrough
	case "path":
		fallthrough
	case "query_arg":
		*e = CreateUpstreamRequestBodyHashFallback(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHashFallback: %v", v)
	}
}

// CreateUpstreamRequestBodyHashOn - What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing
type CreateUpstreamRequestBodyHashOn string

const (
	CreateUpstreamRequestBodyHashOnNone       CreateUpstreamRequestBodyHashOn = "none"
	CreateUpstreamRequestBodyHashOnConsumer   CreateUpstreamRequestBodyHashOn = "consumer"
	CreateUpstreamRequestBodyHashOnIP         CreateUpstreamRequestBodyHashOn = "ip"
	CreateUpstreamRequestBodyHashOnCookie     CreateUpstreamRequestBodyHashOn = "cookie"
	CreateUpstreamRequestBodyHashOnURICapture CreateUpstreamRequestBodyHashOn = "uri_capture"
	CreateUpstreamRequestBodyHashOnPath       CreateUpstreamRequestBodyHashOn = "path"
	CreateUpstreamRequestBodyHashOnQueryArg   CreateUpstreamRequestBodyHashOn = "query_arg"
)

func (e CreateUpstreamRequestBodyHashOn) ToPointer() *CreateUpstreamRequestBodyHashOn {
	return &e
}

func (e *CreateUpstreamRequestBodyHashOn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "consumer":
		fallthrough
	case "ip":
		fallthrough
	case "cookie":
		fallthrough
	case "uri_capture":
		fallthrough
	case "path":
		fallthrough
	case "query_arg":
		*e = CreateUpstreamRequestBodyHashOn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHashOn: %v", v)
	}
}

type CreateUpstreamRequestBodyHealthchecksActiveHealthy struct {
	// An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. With form-encoded, the notation is `http_statuses[]=200&http_statuses[]=302`. With JSON, use an array.
	HTTPStatuses []int64 `json:"http_statuses,omitempty"`
	// Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed.
	Interval *int64 `json:"interval,omitempty"`
	// Number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy.
	Successes *int64 `json:"successes,omitempty"`
}

// CreateUpstreamRequestBodyHealthchecksActiveType - Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.
type CreateUpstreamRequestBodyHealthchecksActiveType string

const (
	CreateUpstreamRequestBodyHealthchecksActiveTypeTCP   CreateUpstreamRequestBodyHealthchecksActiveType = "tcp"
	CreateUpstreamRequestBodyHealthchecksActiveTypeHTTP  CreateUpstreamRequestBodyHealthchecksActiveType = "http"
	CreateUpstreamRequestBodyHealthchecksActiveTypeHTTPS CreateUpstreamRequestBodyHealthchecksActiveType = "https"
	CreateUpstreamRequestBodyHealthchecksActiveTypeGrpc  CreateUpstreamRequestBodyHealthchecksActiveType = "grpc"
	CreateUpstreamRequestBodyHealthchecksActiveTypeGrpcs CreateUpstreamRequestBodyHealthchecksActiveType = "grpcs"
)

func (e CreateUpstreamRequestBodyHealthchecksActiveType) ToPointer() *CreateUpstreamRequestBodyHealthchecksActiveType {
	return &e
}

func (e *CreateUpstreamRequestBodyHealthchecksActiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		*e = CreateUpstreamRequestBodyHealthchecksActiveType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHealthchecksActiveType: %v", v)
	}
}

type CreateUpstreamRequestBodyHealthchecksActiveUnhealthy struct {
	// Number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy.
	HTTPFailures *int64 `json:"http_failures,omitempty"`
	// An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. With form-encoded, the notation is `http_statuses[]=429&http_statuses[]=404`. With JSON, use an array.
	HTTPStatuses []int64 `json:"http_statuses,omitempty"`
	// Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed.
	Interval *int64 `json:"interval,omitempty"`
	// Number of TCP failures in active probes to consider a target unhealthy.
	TCPFailures *int64 `json:"tcp_failures,omitempty"`
	// Number of timeouts in active probes to consider a target unhealthy.
	Timeouts *int64 `json:"timeouts,omitempty"`
}

type CreateUpstreamRequestBodyHealthchecksActive struct {
	// Number of targets to check concurrently in active health checks.
	Concurrency *int64                                              `json:"concurrency,omitempty"`
	Healthy     *CreateUpstreamRequestBodyHealthchecksActiveHealthy `json:"healthy,omitempty"`
	// Path to use in GET HTTP request to run as a probe on active health checks.
	HTTPPath *string `json:"http_path,omitempty"`
	// The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI.
	HTTPSSni               *string `json:"https_sni,omitempty"`
	HTTPSVerifyCertificate *bool   `json:"https_verify_certificate,omitempty"`
	// Socket timeout for active health checks (in seconds).
	Timeout *int64 `json:"timeout,omitempty"`
	// Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.
	Type      *CreateUpstreamRequestBodyHealthchecksActiveType      `json:"type,omitempty"`
	Unhealthy *CreateUpstreamRequestBodyHealthchecksActiveUnhealthy `json:"unhealthy,omitempty"`
}

type CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses int64

const (
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundred             CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 200
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndOne       CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 201
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndTwo       CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 202
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndThree     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 203
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndFour      CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 204
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndFive      CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 205
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndSix       CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 206
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndSeven     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 207
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndEight     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 208
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesTwoHundredAndTwentySix CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 226
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundred           CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 300
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndOne     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 301
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndTwo     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 302
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndThree   CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 303
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndFour    CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 304
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndFive    CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 305
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndSix     CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 306
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndSeven   CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 307
	CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatusesThreeHundredAndEight   CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses = 308
)

func (e CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses) ToPointer() *CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses {
	return &e
}

func (e *CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 200:
		fallthrough
	case 201:
		fallthrough
	case 202:
		fallthrough
	case 203:
		fallthrough
	case 204:
		fallthrough
	case 205:
		fallthrough
	case 206:
		fallthrough
	case 207:
		fallthrough
	case 208:
		fallthrough
	case 226:
		fallthrough
	case 300:
		fallthrough
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 303:
		fallthrough
	case 304:
		fallthrough
	case 305:
		fallthrough
	case 306:
		fallthrough
	case 307:
		fallthrough
	case 308:
		*e = CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses: %v", v)
	}
}

type CreateUpstreamRequestBodyHealthchecksPassiveHealthy struct {
	// An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks.  With form-encoded, the notation is `http_statuses[]=200&http_statuses[]=201`. With JSON, use an array.
	HTTPStatuses []CreateUpstreamRequestBodyHealthchecksPassiveHealthyHTTPStatuses `json:"http_statuses,omitempty"`
	// Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks.
	Successes *int64 `json:"successes,omitempty"`
}

// CreateUpstreamRequestBodyHealthchecksPassiveType - Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: `tcp`, `http`, `https`, `grpc`, `grpcs`.
type CreateUpstreamRequestBodyHealthchecksPassiveType string

const (
	CreateUpstreamRequestBodyHealthchecksPassiveTypeTCP   CreateUpstreamRequestBodyHealthchecksPassiveType = "tcp"
	CreateUpstreamRequestBodyHealthchecksPassiveTypeHTTP  CreateUpstreamRequestBodyHealthchecksPassiveType = "http"
	CreateUpstreamRequestBodyHealthchecksPassiveTypeHTTPS CreateUpstreamRequestBodyHealthchecksPassiveType = "https"
	CreateUpstreamRequestBodyHealthchecksPassiveTypeGrpc  CreateUpstreamRequestBodyHealthchecksPassiveType = "grpc"
	CreateUpstreamRequestBodyHealthchecksPassiveTypeGrpcs CreateUpstreamRequestBodyHealthchecksPassiveType = "grpcs"
)

func (e CreateUpstreamRequestBodyHealthchecksPassiveType) ToPointer() *CreateUpstreamRequestBodyHealthchecksPassiveType {
	return &e
}

func (e *CreateUpstreamRequestBodyHealthchecksPassiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		*e = CreateUpstreamRequestBodyHealthchecksPassiveType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHealthchecksPassiveType: %v", v)
	}
}

type CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses int64

const (
	CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatusesFourHundredAndTwentyNine CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses = 429
	CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatusesFiveHundred              CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses = 500
	CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatusesFiveHundredAndThree      CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses = 503
)

func (e CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses) ToPointer() *CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses {
	return &e
}

func (e *CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		fallthrough
	case 500:
		fallthrough
	case 503:
		*e = CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses: %v", v)
	}
}

type CreateUpstreamRequestBodyHealthchecksPassiveUnhealthy struct {
	// Number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks.
	HTTPFailures *int64 `json:"http_failures,omitempty"`
	// An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. With form-encoded, the notation is `http_statuses[]=429&http_statuses[]=500`. With JSON, use an array.
	HTTPStatuses []CreateUpstreamRequestBodyHealthchecksPassiveUnhealthyHTTPStatuses `json:"http_statuses,omitempty"`
	// Number of TCP connection failures to consider a target unhealthy, as observed by passive health checks.
	TCPFailures *int64 `json:"tcp_failures,omitempty"`
	// Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks.
	Timeouts *int64 `json:"timeouts,omitempty"`
}

type CreateUpstreamRequestBodyHealthchecksPassive struct {
	Healthy *CreateUpstreamRequestBodyHealthchecksPassiveHealthy `json:"healthy,omitempty"`
	// Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: `tcp`, `http`, `https`, `grpc`, `grpcs`.
	Type      *CreateUpstreamRequestBodyHealthchecksPassiveType      `json:"type,omitempty"`
	Unhealthy *CreateUpstreamRequestBodyHealthchecksPassiveUnhealthy `json:"unhealthy,omitempty"`
}

type CreateUpstreamRequestBodyHealthchecks struct {
	Active  *CreateUpstreamRequestBodyHealthchecksActive  `json:"active,omitempty"`
	Passive *CreateUpstreamRequestBodyHealthchecksPassive `json:"passive,omitempty"`
	// The minimum percentage of the upstreamâ€™s targetsâ€™ weight that must be available for the whole upstream to be considered healthy.
	Threshold *int64 `json:"threshold,omitempty"`
}

type CreateUpstreamRequestBody struct {
	// Which load balancing algorithm to use. Accepted values are: `consistent-hashing`, `least-connections`,` round-robin`. Default: `round-robin`.
	//
	Algorithm *CreateUpstreamRequestBodyAlgorithm `json:"algorithm,omitempty"`
	// If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate *CreateUpstreamRequestBodyClientCertificate `json:"client_certificate,omitempty"`
	// What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no Consumer identified). Not available if hash_on is set to cookie.
	HashFallback *CreateUpstreamRequestBodyHashFallback `json:"hash_fallback,omitempty"`
	// The header name to take the value from as hash input. Only required when hash_fallback is set to header.
	HashFallbackHeader *string `json:"hash_fallback_header,omitempty"`
	// The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
	HashFallbackQueryArg *string `json:"hash_fallback_query_arg,omitempty"`
	// The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
	HashFallbackURICapture *string `json:"hash_fallback_uri_capture,omitempty"`
	// What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing
	HashOn *CreateUpstreamRequestBodyHashOn `json:"hash_on,omitempty"`
	// The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
	HashOnCookie *string `json:"hash_on_cookie,omitempty"`
	// The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Default: `/`.
	HashOnCookiePath *string `json:"hash_on_cookie_path,omitempty"`
	// The header name to take the value from as hash input. Only required when `hash_on` is set to header.
	HashOnHeader *string `json:"hash_on_header,omitempty"`
	// The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
	HashOnQueryArg *string `json:"hash_on_query_arg,omitempty"`
	// The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
	HashOnURICapture *string                                `json:"hash_on_uri_capture,omitempty"`
	Healthchecks     *CreateUpstreamRequestBodyHealthchecks `json:"healthchecks,omitempty"`
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader *string `json:"host_header,omitempty"`
	// This is a hostname, which must be equal to the `host` of a service.
	Name string `json:"name"`
	// The number of slots in the load balancer algorithm. If the algorithm is set to `round-robin`, this setting determines the maximum number of slots. If the algorithm is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range 10-65536.
	Slots *int64 `json:"slots,omitempty"`
	// An optional set of strings associated with the Upstream for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

type CreateUpstreamRequest struct {
	RequestBody *CreateUpstreamRequestBody `request:"mediaType=application/json"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
}

// CreateUpstream400ApplicationJSON - Invalid Upstream
type CreateUpstream400ApplicationJSON struct {
}

type CreateUpstreamResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successfully created Upstream
	Upstream *shared.Upstream
	// Invalid Upstream
	CreateUpstream400ApplicationJSONObject *CreateUpstream400ApplicationJSON
}
