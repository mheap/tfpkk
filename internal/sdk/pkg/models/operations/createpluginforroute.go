// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreatePluginForRouteRequestBodyConfig - The configuration properties for the Plugin
type CreatePluginForRouteRequestBodyConfig struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

type CreatePluginForRouteRequestBodyProtocols string

const (
	CreatePluginForRouteRequestBodyProtocolsHTTP  CreatePluginForRouteRequestBodyProtocols = "http"
	CreatePluginForRouteRequestBodyProtocolsGrpc  CreatePluginForRouteRequestBodyProtocols = "grpc"
	CreatePluginForRouteRequestBodyProtocolsGrpcs CreatePluginForRouteRequestBodyProtocols = "grpcs"
	CreatePluginForRouteRequestBodyProtocolsTLS   CreatePluginForRouteRequestBodyProtocols = "tls"
	CreatePluginForRouteRequestBodyProtocolsTCP   CreatePluginForRouteRequestBodyProtocols = "tcp"
)

func (e CreatePluginForRouteRequestBodyProtocols) ToPointer() *CreatePluginForRouteRequestBodyProtocols {
	return &e
}

func (e *CreatePluginForRouteRequestBodyProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = CreatePluginForRouteRequestBodyProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePluginForRouteRequestBodyProtocols: %v", v)
	}
}

// CreatePluginForRouteRequestBodyRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
type CreatePluginForRouteRequestBodyRoute struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// CreatePluginForRouteRequestBodyService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
type CreatePluginForRouteRequestBodyService struct {
	// The Id of the route.
	ID *string `json:"id,omitempty"`
}

// CreatePluginForRouteRequestBody - Plugin request body
type CreatePluginForRouteRequestBody struct {
	// The configuration properties for the Plugin
	Config *CreatePluginForRouteRequestBodyConfig `json:"config,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool `json:"enabled,omitempty"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin that’s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []CreatePluginForRouteRequestBodyProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *CreatePluginForRouteRequestBodyRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *CreatePluginForRouteRequestBodyService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type CreatePluginForRouteRequest struct {
	// Plugin request body
	RequestBody *CreatePluginForRouteRequestBody `request:"mediaType=application/json"`
	// The unique identifier or the name of the route to retrieve.
	RouteID string `pathParam:"style=simple,explode=false,name=route_id"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
}

// CreatePluginForRoute400ApplicationJSON - Invalid Plugin
type CreatePluginForRoute400ApplicationJSON struct {
}

// CreatePluginForRoute200ApplicationJSONConfig - The configuration properties for the Plugin
type CreatePluginForRoute200ApplicationJSONConfig struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

type CreatePluginForRoute200ApplicationJSONProtocols string

const (
	CreatePluginForRoute200ApplicationJSONProtocolsHTTP  CreatePluginForRoute200ApplicationJSONProtocols = "http"
	CreatePluginForRoute200ApplicationJSONProtocolsGrpc  CreatePluginForRoute200ApplicationJSONProtocols = "grpc"
	CreatePluginForRoute200ApplicationJSONProtocolsGrpcs CreatePluginForRoute200ApplicationJSONProtocols = "grpcs"
	CreatePluginForRoute200ApplicationJSONProtocolsTLS   CreatePluginForRoute200ApplicationJSONProtocols = "tls"
	CreatePluginForRoute200ApplicationJSONProtocolsTCP   CreatePluginForRoute200ApplicationJSONProtocols = "tcp"
)

func (e CreatePluginForRoute200ApplicationJSONProtocols) ToPointer() *CreatePluginForRoute200ApplicationJSONProtocols {
	return &e
}

func (e *CreatePluginForRoute200ApplicationJSONProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = CreatePluginForRoute200ApplicationJSONProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePluginForRoute200ApplicationJSONProtocols: %v", v)
	}
}

// CreatePluginForRoute200ApplicationJSON - Example response
type CreatePluginForRoute200ApplicationJSON struct {
	// The configuration properties for the Plugin
	Config *CreatePluginForRoute200ApplicationJSONConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.)
	Consumer *string `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool   `json:"enabled,omitempty"`
	ID      *string `json:"id,omitempty"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin that’s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []CreatePluginForRoute200ApplicationJSONProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *string `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *string `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type CreatePluginForRouteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Example response
	CreatePluginForRoute200ApplicationJSONObject *CreatePluginForRoute200ApplicationJSON
	// Invalid Plugin
	CreatePluginForRoute400ApplicationJSONObject *CreatePluginForRoute400ApplicationJSON
}
