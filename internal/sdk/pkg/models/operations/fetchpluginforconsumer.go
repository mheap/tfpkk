// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type FetchPluginForConsumerRequest struct {
	// The unique identifier or the username of the Consumer to retrieve.
	ConsumerID string `pathParam:"style=simple,explode=false,name=consumer_id"`
	// Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
	// The unique identifier of the Plugin to create or update.
	PluginIDOrInstanceName string `pathParam:"style=simple,explode=false,name=plugin_id_or_instance_name"`
	// The ID of your runtime group. This variable is available in the Konnect manager
	RuntimeGroupID string `pathParam:"style=simple,explode=false,name=runtimeGroupId"`
	// Number of resources to be returned.
	Size *int64 `queryParam:"style=form,explode=true,name=size"`
	// A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
}

// FetchPluginForConsumer200ApplicationJSONConfig - The configuration properties for the Plugin
type FetchPluginForConsumer200ApplicationJSONConfig struct {
	Hour   *int64 `json:"hour,omitempty"`
	Minute *int64 `json:"minute,omitempty"`
}

type FetchPluginForConsumer200ApplicationJSONProtocols string

const (
	FetchPluginForConsumer200ApplicationJSONProtocolsHTTP  FetchPluginForConsumer200ApplicationJSONProtocols = "http"
	FetchPluginForConsumer200ApplicationJSONProtocolsGrpc  FetchPluginForConsumer200ApplicationJSONProtocols = "grpc"
	FetchPluginForConsumer200ApplicationJSONProtocolsGrpcs FetchPluginForConsumer200ApplicationJSONProtocols = "grpcs"
	FetchPluginForConsumer200ApplicationJSONProtocolsTLS   FetchPluginForConsumer200ApplicationJSONProtocols = "tls"
	FetchPluginForConsumer200ApplicationJSONProtocolsTCP   FetchPluginForConsumer200ApplicationJSONProtocols = "tcp"
)

func (e FetchPluginForConsumer200ApplicationJSONProtocols) ToPointer() *FetchPluginForConsumer200ApplicationJSONProtocols {
	return &e
}

func (e *FetchPluginForConsumer200ApplicationJSONProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "tls":
		fallthrough
	case "tcp":
		*e = FetchPluginForConsumer200ApplicationJSONProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchPluginForConsumer200ApplicationJSONProtocols: %v", v)
	}
}

// FetchPluginForConsumer200ApplicationJSON - Example response
type FetchPluginForConsumer200ApplicationJSON struct {
	// The configuration properties for the Plugin
	Config *FetchPluginForConsumer200ApplicationJSONConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.)
	Consumer *string `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied. Default: `true`.
	//
	Enabled *bool   `json:"enabled,omitempty"`
	ID      *string `json:"id,omitempty"`
	// The Plugin instance name.
	//
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin thatâ€™s going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name *string `json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin.
	Protocols []FetchPluginForConsumer200ApplicationJSONProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `route:{id:<route id>}` or `route:{name:<route name>}`.
	Route *string `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	Service *string `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	//
	Tags []string `json:"tags,omitempty"`
}

type FetchPluginForConsumerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Example response
	FetchPluginForConsumer200ApplicationJSONObject *FetchPluginForConsumer200ApplicationJSON
}
